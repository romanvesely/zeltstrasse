%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: 1031.eps
%%Creator: Adobe Illustrator(R) 18.0
%%For: Jekson
%%CreationDate: 10/3/2015
%%BoundingBox: 0 0 1200 1200
%%HiResBoundingBox: 0 0 1200 1200
%%CropBox: 0 0 1200 1200
%%LanguageLevel: 3
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 18.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 18.0.0 x18 R agm 4.7713 ct 5.3840%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
3 3010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c011 79.156289, 2014/03/31-23:39:12        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">Web</rdf:li>
            </rdf:Alt>
         </dc:title>
         <xmp:CreatorTool>Adobe Illustrator CC 2014 (Windows)</xmp:CreatorTool>
         <xmp:CreateDate>2015-10-03T01:05:46+03:00</xmp:CreateDate>
         <xmp:ModifyDate>2015-10-03T01:05:46+03:00</xmp:ModifyDate>
         <xmp:MetadataDate>2015-10-03T01:05:46+03:00</xmp:MetadataDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq07pGjSSMERAWZmNAANySTirkdJEWSNg6OAyspqCDuCCMVbxV2KuxV&#xA;2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KoDX/+OFqP&#xA;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&#xA;QrDbxJDCleMUahFFTU0UUHU4qqYq7FXYq7FXYq7FXYq7FWndI0aSRgiICzMxoABuSScVQP6f0L/q&#xA;42v/ACOj/wCasVd+n9C/6uNr/wAjo/8AmrFXfp/Qv+rja/8AI6P/AJqxV36f0L/q42v/ACOj/wCa&#xA;sVd+n9C/6uNr/wAjo/8AmrFXfp/Qv+rja/8AI6P/AJqxV36f0L/q42v/ACOj/wCasVd+n9C/6uNr&#xA;/wAjo/8AmrFXfp/Qv+rja/8AI6P/AJqxV36f0L/q42v/ACOj/wCasVd+n9C/6uNr/wAjo/8AmrFX&#xA;fp/Qv+rja/8AI6P/AJqxV36f0L/q42v/ACOj/wCasVQWu67ojaJqCrqFsWNtMABNGSSYz74q7Qtd&#xA;0RdE09W1C2DC2hBBmjBBEY98VRv6f0L/AKuNr/yOj/5qxV36f0L/AKuNr/yOj/5qxV36f0L/AKuN&#xA;r/yOj/5qxV36f0L/AKuNr/yOj/5qxV36f0L/AKuNr/yOj/5qxV36f0L/AKuNr/yOj/5qxV36f0L/&#xA;AKuNr/yOj/5qxV36f0L/AKuNr/yOj/5qxV36f0L/AKuNr/yOj/5qxV36f0L/AKuNr/yOj/5qxV36&#xA;f0L/AKuNr/yOj/5qxV36f0L/AKuNr/yOj/5qxV36f0L/AKuNr/yOj/5qxVHI6SIskbB0cBlZTUEH&#xA;cEEYq3irsVadEkRo5FDo4KsrCoIOxBBxVA/oDQv+rda/8iY/+acVd+gNC/6t1r/yJj/5pxV36A0L&#xA;/q3Wv/ImP/mnFXfoDQv+rda/8iY/+acVd+gNC/6t1r/yJj/5pxV36A0L/q3Wv/ImP/mnFXfoDQv+&#xA;rda/8iY/+acVd+gNC/6t1r/yJj/5pxV36A0L/q3Wv/ImP/mnFXfoDQv+rda/8iY/+acVd+gNC/6t&#xA;1r/yJj/5pxV36A0L/q3Wv/ImP/mnFXfoDQv+rda/8iY/+acVQWu6Foi6JqDLp9sGFtMQRDGCCIz7&#xA;Yq7QtC0RtE09m0+2LG2hJJhjJJMY9sVRv6A0L/q3Wv8AyJj/AOacVd+gNC/6t1r/AMiY/wDmnFXf&#xA;oDQv+rda/wDImP8A5pxV36A0L/q3Wv8AyJj/AOacVd+gNC/6t1r/AMiY/wDmnFXfoDQv+rda/wDI&#xA;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</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:OriginalDocumentID>uuid:65E6390686CF11DBA6E2D887CEACB407</xmpMM:OriginalDocumentID>
         <xmpMM:DocumentID>xmp.did:60cafef7-a4cd-e441-86c2-fe467a205364</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:60cafef7-a4cd-e441-86c2-fe467a205364</xmpMM:InstanceID>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:4eeda6b6-e977-c240-ade1-b0a680dbd952</stRef:instanceID>
            <stRef:documentID>xmp.did:4eeda6b6-e977-c240-ade1-b0a680dbd952</stRef:documentID>
            <stRef:originalDocumentID>uuid:65E6390686CF11DBA6E2D887CEACB407</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:4eeda6b6-e977-c240-ade1-b0a680dbd952</stEvt:instanceID>
                  <stEvt:when>2015-10-03T01:05:31+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2014 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:60cafef7-a4cd-e441-86c2-fe467a205364</stEvt:instanceID>
                  <stEvt:when>2015-10-03T01:05:46+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2014 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <illustrator:StartupProfile>Web</illustrator:StartupProfile>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>1200.000000</stDim:w>
            <stDim:h>1200.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>White</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Black</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>0</xmpG:red>
                           <xmpG:green>0</xmpG:green>
                           <xmpG:blue>0</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Grays</xmpG:groupName>
                  <xmpG:groupType>1</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=0 G=0 B=0</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>0</xmpG:red>
                           <xmpG:green>0</xmpG:green>
                           <xmpG:blue>0</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <pdf:Producer>Adobe PDF library 10.01</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -1200 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 1200 li
1200 1200 li
1200 0 li
cp
clp
1200 1200 mo
0 1200 li
0 0 li
1200 0 li
1200 1200 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
1 1 1 rgb
f
600 1129.22 mo
599.171 1129.22 598.5 1128.54 598.5 1127.72 cv
598.5 72.2832 li
598.5 71.4546 599.171 70.7832 600 70.7832 cv
600.829 70.7832 601.5 71.4546 601.5 72.2832 cv
601.5 1127.72 li
601.5 1128.54 600.829 1129.22 600 1129.22 cv
cp
.3 .3 .3 rgb
f
1127.72 601.5 mo
72.2832 601.5 li
71.4546 601.5 70.7832 600.829 70.7832 600 cv
70.7832 599.171 71.4546 598.5 72.2832 598.5 cv
1127.72 598.5 li
1128.55 598.5 1129.22 599.171 1129.22 600 cv
1129.22 600.829 1128.55 601.5 1127.72 601.5 cv
cp
f
5.60067 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
367.525 166.604 mo
304.758 166.604 li
269.242 223.419 li
269.242 323.522 li
304.758 380.337 li
367.525 380.337 li
403.041 323.522 li
403.041 223.419 li
367.525 166.604 li
cp
@
317.174 357.934 mo
291.645 317.096 li
291.645 229.845 li
317.174 189.006 li
355.11 189.006 li
380.639 229.845 li
380.639 317.096 li
355.11 357.934 li
317.174 357.934 li
cp
@
380.639 240.566 mo
291.645 240.566 li
291.645 229.845 li
380.639 229.845 li
380.639 240.566 li
cp
@
380.639 317.096 mo
291.645 317.096 li
291.645 306.374 li
380.639 306.374 li
380.639 317.096 li
cp
@
4.40053 lw
284.551 277.578 mo
276.336 277.578 li
276.336 269.363 li
284.551 269.363 li
284.551 277.578 li
cp
@
387.733 277.578 mo
395.947 277.578 li
395.947 269.363 li
387.733 269.363 li
387.733 277.578 li
cp
@
347.156 333.958 mo
352.01 327.05 li
347.156 333.958 li
cp
@
353.809 340.611 mo
358.663 333.703 li
353.809 340.611 li
cp
@
418.654 172.347 mo
442.61 172.347 li
442.616 198.033 li
439.287 244.728 li
433.506 244.728 li
433.506 216.164 li
427.763 216.164 li
427.763 244.728 li
421.977 244.728 li
418.654 198.24 li
418.654 172.347 li
cp
428.691 374.594 mo
428.691 363.823 li
432.578 363.823 li
432.578 374.594 li
428.691 374.594 li
cp
412.917 198.447 mo
416.623 250.471 li
427.763 250.471 li
427.763 347.309 li
422.949 347.309 li
422.949 380.337 li
438.321 380.337 li
438.321 347.309 li
433.506 347.309 li
433.506 250.471 li
444.641 250.471 li
448.352 198.24 li
448.352 166.604 li
412.911 166.604 li
412.917 198.447 li
cp
f
424.304 184.697 mo
432.106 181.473 li
424.304 184.697 li
cp
@
422.83 193.939 mo
430.632 190.714 li
422.83 193.939 li
cp
@
253.63 374.594 mo
229.674 374.594 li
229.668 348.908 li
232.997 302.213 li
238.777 302.213 li
238.777 330.777 li
244.52 330.777 li
244.52 302.213 li
250.307 302.213 li
253.63 348.701 li
253.63 374.594 li
cp
243.592 172.347 mo
243.592 183.118 li
239.705 183.118 li
239.705 172.347 li
243.592 172.347 li
cp
259.366 348.494 mo
255.661 296.47 li
244.52 296.47 li
244.52 199.631 li
249.335 199.631 li
249.335 166.604 li
233.962 166.604 li
233.962 199.631 li
238.777 199.631 li
238.777 296.47 li
227.642 296.47 li
223.931 348.701 li
223.931 380.337 li
259.372 380.337 li
259.366 348.494 li
cp
f
244.283 367.609 mo
249.137 360.702 li
244.283 367.609 li
cp
@
239.225 358.72 mo
244.079 351.813 li
239.225 358.72 li
cp
@
226.899 465.734 mo
231.948 465.734 li
234.405 465.734 237.68 463.483 237.68 459.252 cv
237.68 443.352 li
237.68 439.395 235.769 436.87 231.948 436.87 cv
226.899 436.87 li
226.899 465.734 li
cp
241.433 481.429 mo
237.885 481.429 li
237.885 473.036 li
237.885 470.579 236.315 468.941 233.654 468.941 cv
226.899 468.941 li
226.899 481.429 li
223.282 481.429 li
223.282 433.663 li
231.948 433.663 li
237.134 433.731 241.297 436.392 241.16 443.352 cv
241.16 459.252 li
241.16 461.913 239.796 465.12 237.271 466.758 cv
240.137 467.85 241.433 470.375 241.433 473.036 cv
241.433 481.429 li
cp
f
273.026 465.393 mo
271.183 453.793 li
269.477 439.668 li
267.771 453.793 li
265.997 465.393 li
273.026 465.393 li
cp
273.435 468.6 mo
273.435 468.669 li
265.588 468.669 li
265.588 468.6 li
263.609 481.429 li
259.992 481.429 li
267.362 433.663 li
271.524 433.663 li
278.962 481.429 li
275.414 481.429 li
273.435 468.6 li
cp
f
301.82 436.801 mo
301.82 465.598 li
312.261 465.598 li
312.261 468.805 li
301.82 468.805 li
301.82 481.429 li
298.203 481.429 li
298.203 433.663 li
314.103 433.663 li
314.103 436.801 li
301.82 436.801 li
cp
f
347.128 436.801 mo
340.509 436.801 li
340.509 481.429 li
337.029 481.429 li
337.029 436.801 li
330.342 436.801 li
330.342 433.663 li
347.128 433.663 li
347.128 436.801 li
cp
f
365.96 481.429 mo
365.96 433.663 li
369.577 433.663 li
369.577 481.429 li
365.96 481.429 li
cp
f
409.835 433.663 mo
409.835 481.429 li
406.492 481.429 li
396.461 452.292 li
393.526 442.329 li
394.072 452.701 li
394.072 481.429 li
390.456 481.429 li
390.456 433.663 li
393.868 433.663 li
404.103 463.687 li
406.833 473.172 li
406.287 463.278 li
406.287 433.663 li
409.835 433.663 li
cp
f
448.933 465.256 mo
448.933 471.944 li
448.933 477.608 445.59 481.838 439.857 481.838 cv
434.262 481.838 430.441 478.222 430.441 471.876 cv
430.441 443.557 li
430.441 438.03 433.921 433.458 439.721 433.458 cv
445.521 433.458 449.001 437.621 449.001 443.489 cv
449.001 447.856 li
445.59 447.856 li
445.59 443.489 li
445.59 439.736 443.884 436.665 439.789 436.665 cv
436.309 436.665 434.057 439.531 434.057 443.557 cv
434.057 471.876 li
434.057 475.901 436.036 478.563 439.857 478.563 cv
443.269 478.563 445.453 476.516 445.453 471.944 cv
445.453 468.396 li
438.493 468.396 li
438.493 465.256 li
448.933 465.256 li
cp
f
269.132 493.89 mo
269.132 513.542 li
276.181 513.542 li
276.181 515.69 li
269.132 515.69 li
269.132 522.224 li
278.001 522.224 li
278.001 524.419 li
266.658 524.419 li
266.658 491.743 li
278.001 491.743 li
278.001 493.89 li
269.132 493.89 li
cp
f
283.976 498.231 mo
283.976 517.977 li
283.976 520.357 285.236 522.505 287.991 522.505 cv
290.558 522.505 291.818 520.404 291.818 517.93 cv
291.818 498.278 li
291.818 495.99 290.651 493.656 287.991 493.656 cv
285.236 493.656 283.976 495.71 283.976 498.231 cv
cp
286.823 524.652 mo
283.463 524.139 281.502 521.291 281.502 517.977 cv
281.502 498.231 li
281.502 494.73 283.696 491.462 287.991 491.462 cv
291.912 491.462 294.199 494.637 294.199 498.278 cv
294.199 517.93 li
294.199 521.058 292.519 524.092 289.204 524.652 cv
289.204 528.48 li
286.823 528.48 li
286.823 524.652 li
cp
f
311.564 517.93 mo
311.564 521.384 309.51 524.792 305.216 524.792 cv
301.294 524.792 298.867 521.665 298.867 517.883 cv
298.867 491.743 li
301.341 491.743 li
301.341 517.883 li
301.341 520.217 302.462 522.598 305.216 522.598 cv
308.157 522.598 309.184 520.451 309.184 517.93 cv
309.184 491.743 li
311.564 491.743 li
311.564 517.93 li
cp
f
316.699 524.419 mo
316.699 491.743 li
319.173 491.743 li
319.173 524.419 li
316.699 524.419 li
cp
f
334.344 498.278 mo
334.344 495.57 332.897 493.936 330.376 493.936 cv
326.501 493.936 li
326.501 513.402 li
330.376 513.402 li
332.383 513.402 334.344 511.768 334.344 508.967 cv
334.344 498.278 li
cp
336.725 508.967 mo
336.725 512.235 334.437 515.596 330.376 515.596 cv
326.501 515.596 li
326.501 524.419 li
324.027 524.419 li
324.027 491.743 li
330.376 491.743 li
333.363 491.743 336.725 493.47 336.725 498.278 cv
336.725 508.967 li
cp
f
343.914 498.185 mo
343.774 508.407 li
343.167 524.419 li
340.786 524.419 li
342.046 491.696 li
345.221 491.696 li
348.068 510.461 li
349.329 519.891 li
350.729 510.461 li
353.623 491.696 li
356.657 491.696 li
357.918 524.419 li
355.444 524.419 li
354.79 508.407 li
354.837 498.138 li
354.743 498.138 li
353.156 508.174 li
350.542 523.905 li
347.928 523.905 li
345.361 508.174 li
344.007 498.185 li
343.914 498.185 li
cp
f
364.64 493.89 mo
364.64 513.542 li
371.688 513.542 li
371.688 515.69 li
364.64 515.69 li
364.64 522.224 li
373.509 522.224 li
373.509 524.419 li
362.166 524.419 li
362.166 491.743 li
373.509 491.743 li
373.509 493.89 li
364.64 493.89 li
cp
f
390.734 491.743 mo
390.734 524.419 li
388.447 524.419 li
381.585 504.486 li
379.578 497.671 li
379.951 504.766 li
379.951 524.419 li
377.477 524.419 li
377.477 491.743 li
379.811 491.743 li
386.813 512.282 li
388.68 518.77 li
388.307 512.002 li
388.307 491.743 li
390.734 491.743 li
cp
f
405.626 493.89 mo
401.098 493.89 li
401.098 524.419 li
398.716 524.419 li
398.716 493.89 li
394.142 493.89 li
394.142 491.743 li
405.626 491.743 li
405.626 493.89 li
cp
f
914.177 233.278 mo
912.604 233.278 911.325 234.558 911.325 236.13 cv
911.325 237.703 912.604 238.982 914.177 238.982 cv
915.749 238.982 917.029 237.703 917.029 236.13 cv
917.029 234.558 915.749 233.278 914.177 233.278 cv
cp
914.177 242.093 mo
910.889 242.093 908.214 239.418 908.214 236.13 cv
908.214 232.842 910.889 230.167 914.177 230.167 cv
917.465 230.167 920.14 232.842 920.14 236.13 cv
920.14 239.418 917.465 242.093 914.177 242.093 cv
cp
f
903.501 249.499 mo
901.928 249.499 900.649 250.778 900.649 252.351 cv
900.649 253.923 901.928 255.202 903.501 255.202 cv
905.073 255.202 906.353 253.923 906.353 252.351 cv
906.353 250.778 905.073 249.499 903.501 249.499 cv
cp
903.501 258.313 mo
900.213 258.313 897.538 255.638 897.538 252.351 cv
897.538 249.063 900.213 246.388 903.501 246.388 cv
906.789 246.388 909.464 249.063 909.464 252.351 cv
909.464 255.638 906.789 258.313 903.501 258.313 cv
cp
f
6.38399 lw
933.399 268.722 mo
946.752 291.793 li
948.444 321.079 li
919.598 376.021 li
918.331 378.434 915.831 379.945 913.106 379.945 cv
817.539 379.945 li
814.814 379.945 812.314 378.434 811.047 376.021 cv
782.201 321.079 li
783.893 291.793 li
797.246 268.722 li
800.15 209.59 li
797.946 208.126 li
793.054 204.876 791.748 198.262 795.036 193.396 cv
795.036 193.396 li
831.953 193.396 li
861.681 231.096 li
868.973 231.096 li
898.692 193.396 li
935.609 193.396 li
935.609 193.396 li
938.898 198.262 937.591 204.876 932.699 208.126 cv
930.495 209.59 li
933.399 268.722 li
cp
@
782.201 321.079 mo
948.444 321.079 li
946.752 291.793 li
783.893 291.793 li
782.201 321.079 li
cp
@
826.4 321.079 mo
826.4 291.793 li
812.245 291.793 li
812.245 321.079 li
826.4 321.079 li
cp
@
904.494 291.793 mo
904.494 321.079 li
918.648 321.079 li
918.648 291.793 li
904.494 291.793 li
cp
@
0 lc
892.492 202.122 mo
838.834 202.122 li
861.681 231.096 li
868.973 231.096 li
892.492 202.122 li
cp
@
865.323 231.096 mo
865.323 379.945 li
865.323 231.096 li
cp
@
5.01599 lw
1 lc
813.648 348.697 mo
821.309 361.89 li
813.648 348.697 li
cp
@
822.692 339.652 mo
830.353 352.846 li
822.692 339.652 li
cp
@
812.922 230.167 mo
826.591 230.167 li
812.922 230.167 li
cp
@
821.537 241.233 mo
830.265 241.233 li
821.537 241.233 li
cp
@
757.557 476.777 mo
780.152 476.777 li
780.152 483.594 li
757.557 483.594 li
757.557 476.777 li
cp
757.557 462.607 mo
776.402 462.607 li
776.402 469.424 li
757.557 469.424 li
757.557 462.607 li
cp
780.298 456.276 mo
757.557 456.276 li
757.557 449.459 li
780.298 449.459 li
780.298 456.276 li
cp
f
805.425 466.551 mo
817.55 483.594 li
809.175 483.594 li
801.237 472.443 li
793.3 483.594 li
784.924 483.594 li
797.049 466.551 li
784.924 449.459 li
793.3 449.459 li
801.237 460.659 li
809.175 449.459 li
817.55 449.459 li
805.425 466.551 li
cp
f
847.207 449.459 mo
847.207 456.276 li
837.76 456.276 li
837.76 483.594 li
830.943 483.594 li
830.943 456.276 li
821.447 456.276 li
821.447 449.459 li
847.207 449.459 li
cp
f
859.138 456.227 mo
859.138 483.546 li
852.321 483.546 li
852.321 449.41 li
865.663 449.41 li
871.312 449.41 875.89 454.036 875.89 459.685 cv
875.89 463.824 873.455 467.379 869.9 468.986 cv
876.669 483.594 li
869.413 483.594 li
863.034 469.911 li
863.034 463.093 li
865.663 463.093 li
867.563 463.093 869.072 461.584 869.072 459.685 cv
869.072 457.786 867.563 456.227 865.663 456.227 cv
859.138 456.227 li
cp
f
881.734 476.777 mo
904.328 476.777 li
904.328 483.594 li
881.734 483.594 li
881.734 476.777 li
cp
881.734 462.607 mo
900.579 462.607 li
900.579 469.424 li
881.734 469.424 li
881.734 462.607 li
cp
904.475 456.276 mo
881.734 456.276 li
881.734 449.459 li
904.475 449.459 li
904.475 456.276 li
cp
f
937.198 483.594 mo
937.198 462.704 li
927.41 471.615 li
917.622 462.704 li
917.622 483.594 li
910.805 483.594 li
910.805 449.459 li
913.142 449.459 li
927.41 462.412 li
941.629 449.459 li
944.015 449.459 li
944.015 483.594 li
937.198 483.594 li
cp
f
950.347 476.777 mo
972.942 476.777 li
972.942 483.594 li
950.347 483.594 li
950.347 476.777 li
cp
950.347 462.607 mo
969.192 462.607 li
969.192 469.424 li
950.347 469.424 li
950.347 462.607 li
cp
973.088 456.276 mo
950.347 456.276 li
950.347 449.459 li
973.088 449.459 li
973.088 456.276 li
cp
f
819.823 513.335 mo
818.703 513.044 816.609 512.508 814.661 511.193 cv
811.934 509.391 810.424 506.762 810.278 503.499 cv
810.132 500.772 811.009 498.386 812.762 496.535 cv
815.294 493.906 818.946 493.176 820.699 493.176 cv
825.666 493.176 828.442 494.977 830.925 496.584 cv
832.045 497.315 li
828.49 503.11 li
827.273 502.33 li
825.082 500.918 823.67 499.993 820.699 499.993 cv
820.261 499.993 818.556 500.334 817.68 501.259 cv
817.388 501.551 817.047 502.087 817.096 503.207 cv
817.144 504.96 818.362 505.934 821.478 506.713 cv
821.868 506.81 822.16 506.908 822.452 507.005 cv
825.715 508.125 828.247 509.635 830 511.534 cv
831.753 513.482 832.678 515.77 832.678 518.205 cv
832.678 520.591 831.656 523.075 829.951 524.974 cv
827.955 527.214 825.179 528.48 822.111 528.48 cv
820.602 528.48 818.556 528.382 816.122 527.652 cv
813.054 526.678 810.327 524.974 807.99 522.491 cv
812.956 517.816 li
816.56 521.663 820.602 521.663 822.111 521.663 cv
824.936 521.663 825.861 519.082 825.861 518.205 cv
825.861 516.354 823.767 514.65 820.212 513.433 cv
820.066 513.384 li
819.823 513.335 li
cp
f
857.465 493.711 mo
864.282 493.711 li
864.282 527.798 li
857.465 527.798 li
857.465 513.579 li
844.853 513.579 li
844.853 527.798 li
838.035 527.798 li
838.035 493.711 li
844.853 493.711 li
844.853 506.762 li
857.465 506.762 li
857.465 493.711 li
cp
f
877.954 493.031 mo
875.106 493.031 872.414 493.707 870.032 494.915 cv
870.032 503.557 li
871.993 501.396 874.807 500.045 877.954 500.045 cv
883.848 500.045 888.612 504.809 888.612 510.703 cv
888.612 516.597 883.848 521.372 877.954 521.372 cv
874.807 521.372 871.993 520.021 870.032 517.86 cv
870.032 526.502 li
872.414 527.71 875.106 528.386 877.954 528.386 cv
887.693 528.386 895.626 520.442 895.626 510.703 cv
895.626 500.964 887.693 493.031 877.954 493.031 cv
cp
f
912.43 507.346 mo
914.28 507.346 915.838 505.836 915.838 503.937 cv
915.838 502.038 914.28 500.48 912.43 500.48 cv
908.193 500.48 li
908.193 507.346 li
912.43 507.346 li
cp
912.43 493.663 mo
918.078 493.663 922.656 498.288 922.656 503.937 cv
922.656 509.586 918.078 514.163 912.43 514.163 cv
908.193 514.163 li
908.193 527.798 li
901.375 527.798 li
901.375 493.663 li
912.43 493.663 li
cp
f
339.031 782.048 mo
337.405 782.048 336.083 783.37 336.083 784.996 cv
336.083 786.622 337.405 787.944 339.031 787.944 cv
340.656 787.944 341.979 786.622 341.979 784.996 cv
341.979 783.37 340.656 782.048 339.031 782.048 cv
cp
339.031 791.16 mo
335.632 791.16 332.867 788.395 332.867 784.996 cv
332.867 781.597 335.632 778.832 339.031 778.832 cv
342.43 778.832 345.195 781.597 345.195 784.996 cv
345.195 788.395 342.43 791.16 339.031 791.16 cv
cp
f
5.60067 lw
315.632 775.964 mo
315.632 906.217 li
261.327 885.928 li
315.632 775.964 li
cp
@
315.635 775.966 mo
374.755 906.215 li
420.698 906.215 li
315.635 693.468 li
210.572 906.215 li
315.635 906.215 li
315.635 775.966 li
cp
@
4.40053 lw
287.39 876.509 mo
305.632 884.35 li
287.39 876.509 li
cp
@
289.457 864.837 mo
301.482 870.006 li
289.457 864.837 li
cp
@
5.60067 lw
461.711 906.215 mo
420.698 906.215 li
315.635 693.468 li
356.648 693.468 li
461.711 906.215 li
cp
@
4.40053 lw
367.574 715.592 mo
349.002 715.592 li
367.574 715.592 li
cp
@
372.084 724.723 mo
358.288 724.723 li
372.084 724.723 li
cp
@
239.033 957.338 mo
236.848 957.531 li
236.504 955.774 235.894 954.317 235.016 953.16 cv
234.137 952.004 233.045 951.083 231.738 950.397 cv
230.431 949.712 228.975 949.219 227.368 948.919 cv
225.761 948.619 224.122 948.469 222.451 948.469 cv
220.694 948.469 218.734 948.78 216.571 949.4 cv
214.407 950.022 212.371 951.072 210.465 952.55 cv
208.558 954.028 206.962 956 205.677 958.463 cv
204.392 960.927 203.749 963.98 203.749 967.621 cv
203.749 970.749 204.327 973.588 205.484 976.137 cv
206.641 978.687 208.151 980.883 210.015 982.725 cv
211.879 984.567 213.989 986.002 216.346 987.03 cv
218.702 988.059 221.08 988.573 223.479 988.573 cv
224.979 988.573 226.478 988.392 227.979 988.027 cv
229.478 987.663 230.838 987.106 232.06 986.355 cv
233.281 985.606 234.319 984.664 235.177 983.528 cv
236.033 982.394 236.59 981.032 236.848 979.447 cv
239.033 979.383 li
239.033 988.702 li
238.39 989.087 237.34 989.463 235.884 989.826 cv
234.426 990.191 232.863 990.523 231.192 990.822 cv
229.521 991.122 227.871 991.357 226.243 991.529 cv
224.614 991.7 223.287 991.787 222.258 991.787 cv
218.659 991.872 215.274 991.411 212.104 990.405 cv
208.933 989.398 206.169 987.898 203.813 985.906 cv
201.456 983.914 199.604 981.407 198.254 978.387 cv
196.904 975.366 196.229 971.863 196.229 967.878 cv
196.229 964.322 196.989 961.162 198.511 958.398 cv
200.031 955.635 202.014 953.289 204.456 951.361 cv
206.898 949.433 209.662 947.955 212.747 946.927 cv
215.832 945.898 218.444 945.342 220.587 945.256 cv
223.2 945.213 225.268 945.299 226.79 945.513 cv
228.31 945.728 229.767 946.017 231.16 946.38 cv
232.552 946.745 233.901 947.151 235.209 947.602 cv
236.515 948.051 237.79 948.469 239.033 948.854 cv
239.033 957.338 li
cp
f
264.162 973.791 mo
257.027 951.426 li
256.771 951.297 li
250.279 970.385 li
250.022 971.606 li
250.022 972.335 250.333 972.882 250.954 973.245 cv
251.575 973.609 252.25 973.791 252.979 973.791 cv
264.162 973.791 li
cp
276.694 986.838 mo
277.293 987.567 278.118 988.113 279.168 988.477 cv
280.218 988.842 281.342 989.023 282.542 989.023 cv
282.542 990.951 li
262.49 990.951 li
262.49 989.023 li
263.904 989.023 li
264.375 989.023 264.857 988.98 265.351 988.895 cv
265.842 988.81 266.292 988.67 266.7 988.477 cv
267.107 988.284 267.439 988.017 267.696 987.674 cv
267.953 987.331 268.082 986.881 268.082 986.324 cv
268.082 985.938 267.963 985.285 267.729 984.363 cv
267.492 983.442 267.203 982.618 266.861 981.889 cv
265.382 977.005 li
247.708 977.005 li
243.017 990.951 li
238.582 990.951 li
252.593 951.232 li
252.85 950.505 253.096 949.723 253.332 948.887 cv
253.567 948.051 253.814 947.142 254.071 946.155 cv
257.027 946.155 li
258.483 946.155 259.705 946.455 260.691 947.055 cv
261.676 947.655 262.49 948.427 263.133 949.369 cv
263.776 950.312 264.3 951.351 264.708 952.485 cv
265.114 953.621 265.489 954.703 265.833 955.731 cv
266.475 957.574 267.182 959.588 267.953 961.772 cv
268.725 963.958 269.496 966.175 270.267 968.425 cv
271.038 970.674 271.777 972.87 272.484 975.013 cv
273.191 977.155 273.844 979.072 274.444 980.765 cv
275.044 982.458 275.537 983.85 275.923 984.942 cv
276.309 986.034 276.565 986.667 276.694 986.838 cv
cp
f
323.481 980.925 mo
323.481 982.468 323.556 983.753 323.707 984.781 cv
323.856 985.81 324.221 986.624 324.799 987.224 cv
325.377 987.824 326.255 988.252 327.434 988.509 cv
328.612 988.766 330.23 988.895 332.287 988.895 cv
332.287 990.951 li
307.029 990.951 li
307.029 988.895 li
308.442 988.895 309.664 988.862 310.692 988.798 cv
311.72 988.733 312.556 988.509 313.199 988.123 cv
313.97 987.737 314.548 987.117 314.934 986.26 cv
315.319 985.403 315.512 984.139 315.512 982.468 cv
314.484 953.289 li
304.201 976.233 li
289.354 955.153 li
289.611 955.153 li
287.555 990.951 li
283.827 990.951 li
285.627 955.153 li
285.627 953.697 285.499 952.55 285.241 951.715 cv
284.984 950.879 284.599 950.204 284.084 949.69 cv
283.442 949.176 282.691 948.833 281.835 948.662 cv
280.978 948.491 279.843 948.404 278.429 948.404 cv
278.429 946.091 li
291.797 946.091 li
306.257 964.922 li
315.512 946.091 li
321.939 946.091 li
323.481 980.925 li
cp
f
343.341 973.405 mo
343.983 973.534 344.711 973.609 345.526 973.631 cv
346.339 973.652 347.068 973.663 347.711 973.663 cv
350.195 973.663 352.328 973.267 354.106 972.474 cv
355.883 971.682 357.319 970.674 358.412 969.453 cv
359.504 968.231 360.308 966.861 360.822 965.34 cv
361.336 963.819 361.593 962.309 361.593 960.809 cv
361.593 959.096 361.357 957.489 360.886 955.988 cv
360.415 954.489 359.643 953.204 358.573 952.132 cv
357.501 951.062 356.12 950.215 354.427 949.594 cv
352.734 948.973 350.667 948.662 348.225 948.662 cv
347.197 948.662 346.318 948.716 345.59 948.822 cv
344.861 948.93 344.112 949.048 343.341 949.176 cv
343.341 973.405 li
cp
343.341 976.233 mo
343.341 983.046 li
343.341 984.46 343.522 985.553 343.887 986.324 cv
344.25 987.095 344.765 987.663 345.43 988.027 cv
346.093 988.392 346.875 988.627 347.775 988.733 cv
348.675 988.842 349.681 988.917 350.796 988.959 cv
350.796 991.016 li
342.569 991.016 li
342.098 990.973 341.477 990.897 340.706 990.79 cv
339.935 990.684 339.163 990.416 338.392 989.987 cv
337.621 989.56 336.956 988.917 336.4 988.059 cv
335.842 987.202 335.564 985.96 335.564 984.331 cv
335.564 973.405 li
335.564 955.924 li
335.564 955.281 335.553 954.703 335.532 954.188 cv
335.51 953.675 335.436 953.289 335.307 953.032 cv
335.221 951.875 334.986 950.986 334.6 950.365 cv
334.214 949.744 333.7 949.283 333.058 948.983 cv
332.415 948.684 331.665 948.512 330.808 948.469 cv
329.951 948.427 329.051 948.404 328.109 948.404 cv
328.109 946.091 li
351.31 946.091 li
355.167 946.091 358.326 946.563 360.79 947.505 cv
363.253 948.448 365.17 949.637 366.542 951.072 cv
367.913 952.508 368.856 954.051 369.37 955.699 cv
369.884 957.35 370.141 958.881 370.141 960.295 cv
370.141 962.052 369.852 963.797 369.273 965.532 cv
368.695 967.268 367.849 968.875 366.735 970.353 cv
365.62 971.831 364.217 973.116 362.525 974.209 cv
360.832 975.302 358.894 976.063 356.709 976.49 cv
353.624 976.876 350.989 977.026 348.804 976.94 cv
346.619 976.855 344.883 976.619 343.598 976.233 cv
343.341 976.233 li
cp
f
385.694 982.981 mo
385.694 984.396 385.875 985.488 386.24 986.26 cv
386.604 987.03 387.118 987.599 387.783 987.963 cv
388.446 988.327 389.229 988.563 390.128 988.67 cv
391.028 988.777 392.034 988.853 393.149 988.895 cv
393.149 990.951 li
370.462 990.951 li
370.462 988.895 li
371.49 988.853 372.443 988.777 373.322 988.67 cv
374.2 988.563 374.971 988.327 375.636 987.963 cv
376.299 987.599 376.813 987.03 377.178 986.26 cv
377.542 985.488 377.725 984.396 377.725 982.981 cv
377.725 954.382 li
377.725 952.968 377.542 951.865 377.178 951.072 cv
376.813 950.279 376.299 949.701 375.636 949.337 cv
374.971 948.973 374.2 948.748 373.322 948.662 cv
372.443 948.576 371.49 948.491 370.462 948.404 cv
370.462 946.091 li
379.01 946.091 li
379.438 946.178 380.038 946.263 380.809 946.348 cv
381.581 946.435 382.32 946.691 383.027 947.119 cv
383.733 947.548 384.354 948.202 384.891 949.079 cv
385.426 949.958 385.694 951.212 385.694 952.839 cv
385.694 953.354 li
385.694 953.867 li
385.694 982.981 li
cp
f
430.232 990.951 mo
426.376 990.951 li
401.632 955.153 li
401.889 955.153 li
399.961 990.951 li
396.233 990.951 li
398.033 955.153 li
398.033 953.697 397.904 952.55 397.647 951.715 cv
397.39 950.879 397.005 950.204 396.491 949.69 cv
395.848 949.176 395.098 948.833 394.241 948.662 cv
393.383 948.491 392.249 948.404 390.835 948.404 cv
390.835 946.091 li
404.332 946.091 li
426.312 976.49 li
426.697 946.091 li
430.875 946.091 li
430.232 990.951 li
cp
f
471.685 980.925 mo
471.685 979.769 471.545 978.88 471.267 978.258 cv
470.988 977.638 470.613 977.165 470.142 976.844 cv
469.67 976.522 469.103 976.33 468.439 976.266 cv
467.774 976.201 467.057 976.127 466.286 976.041 cv
451.054 976.041 li
448.74 976.041 li
443.856 976.041 li
444.669 978.055 445.752 979.854 447.102 981.439 cv
448.451 983.025 449.939 984.375 451.568 985.488 cv
453.196 986.603 454.942 987.46 456.806 988.059 cv
458.67 988.659 460.544 988.959 462.43 988.959 cv
463.972 988.959 465.547 988.905 467.154 988.798 cv
468.76 988.691 470.271 988.316 471.685 987.674 cv
471.685 980.925 li
cp
477.854 988.702 mo
477.212 989.087 476.172 989.463 474.737 989.826 cv
473.301 990.191 471.749 990.523 470.078 990.822 cv
468.407 991.122 466.757 991.357 465.129 991.529 cv
463.5 991.7 462.173 991.787 461.145 991.787 cv
457.545 991.872 454.16 991.411 450.99 990.405 cv
447.818 989.398 445.055 987.889 442.699 985.874 cv
440.342 983.86 438.489 981.343 437.14 978.322 cv
435.79 975.302 435.115 971.799 435.115 967.814 cv
435.115 964.258 435.876 961.098 437.397 958.334 cv
438.917 955.57 440.899 953.247 443.342 951.361 cv
445.784 949.477 448.547 948.03 451.632 947.022 cv
454.717 946.017 457.802 945.471 460.887 945.384 cv
462.558 945.342 464.154 945.427 465.675 945.641 cv
467.196 945.856 468.653 946.146 470.046 946.509 cv
471.438 946.873 472.777 947.28 474.063 947.729 cv
475.348 948.18 476.611 948.598 477.854 948.983 cv
477.854 957.531 li
476.055 957.531 li
475.711 955.731 475.091 954.232 474.191 953.032 cv
473.292 951.833 472.177 950.879 470.849 950.172 cv
469.521 949.465 468.042 948.962 466.415 948.662 cv
464.786 948.362 463.115 948.212 461.401 948.212 cv
459.644 948.212 457.695 948.501 455.553 949.079 cv
453.41 949.658 451.396 950.633 449.512 952.004 cv
447.625 953.376 445.998 955.229 444.627 957.563 cv
443.255 959.898 442.484 962.801 442.313 966.271 cv
442.355 966.786 442.442 967.407 442.57 968.136 cv
442.699 968.864 442.988 969.571 443.438 970.257 cv
443.888 970.942 444.541 971.521 445.398 971.991 cv
446.255 972.464 447.455 972.698 448.998 972.698 cv
465.772 972.698 li
471.685 972.698 li
472.884 972.698 473.891 972.967 474.705 973.502 cv
475.519 974.038 476.151 974.702 476.601 975.494 cv
477.051 976.288 477.373 977.133 477.565 978.033 cv
477.758 978.933 477.854 979.727 477.854 980.411 cv
477.854 988.702 li
cp
f
250.928 1014.89 mo
251.146 1014.94 251.393 1014.96 251.669 1014.97 cv
251.945 1014.98 252.192 1014.98 252.411 1014.98 cv
253.253 1014.98 253.977 1014.85 254.58 1014.58 cv
255.183 1014.31 255.669 1013.97 256.04 1013.55 cv
256.411 1013.14 256.683 1012.67 256.858 1012.16 cv
257.032 1011.64 257.119 1011.13 257.119 1010.62 cv
257.119 1010.04 257.039 1009.5 256.879 1008.99 cv
256.719 1008.48 256.458 1008.04 256.095 1007.68 cv
255.731 1007.32 255.263 1007.03 254.688 1006.82 cv
254.114 1006.61 253.414 1006.5 252.585 1006.5 cv
252.236 1006.5 251.938 1006.52 251.691 1006.56 cv
251.444 1006.59 251.19 1006.63 250.928 1006.68 cv
250.928 1014.89 li
cp
250.928 1015.85 mo
250.928 1018.16 li
250.928 1018.64 250.99 1019.01 251.113 1019.28 cv
251.237 1019.54 251.411 1019.73 251.637 1019.85 cv
251.862 1019.98 252.127 1020.06 252.433 1020.09 cv
252.738 1020.13 253.079 1020.16 253.457 1020.17 cv
253.457 1020.87 li
250.667 1020.87 li
250.506 1020.85 250.296 1020.83 250.035 1020.79 cv
249.773 1020.75 249.511 1020.66 249.25 1020.52 cv
248.988 1020.37 248.763 1020.16 248.574 1019.86 cv
248.385 1019.57 248.291 1019.15 248.291 1018.6 cv
248.291 1014.89 li
248.291 1008.96 li
248.291 1008.75 248.287 1008.55 248.28 1008.38 cv
248.272 1008.2 248.247 1008.07 248.203 1007.98 cv
248.174 1007.59 248.094 1007.29 247.963 1007.08 cv
247.833 1006.87 247.658 1006.71 247.44 1006.61 cv
247.222 1006.51 246.968 1006.45 246.677 1006.44 cv
246.386 1006.42 246.081 1006.41 245.762 1006.41 cv
245.762 1005.63 li
253.631 1005.63 li
254.939 1005.63 256.011 1005.79 256.847 1006.11 cv
257.682 1006.43 258.333 1006.83 258.798 1007.32 cv
259.263 1007.81 259.583 1008.33 259.757 1008.89 cv
259.932 1009.45 260.019 1009.97 260.019 1010.45 cv
260.019 1011.04 259.92 1011.64 259.724 1012.22 cv
259.528 1012.81 259.241 1013.36 258.863 1013.86 cv
258.485 1014.36 258.009 1014.8 257.436 1015.17 cv
256.861 1015.54 256.204 1015.8 255.462 1015.94 cv
254.416 1016.07 253.522 1016.12 252.781 1016.09 cv
252.04 1016.06 251.451 1015.98 251.016 1015.85 cv
250.928 1015.85 li
cp
f
264.989 1014.89 mo
265.207 1014.94 265.454 1014.96 265.73 1014.97 cv
266.006 1014.98 266.253 1014.98 266.471 1014.98 cv
267.314 1014.98 268.037 1014.85 268.64 1014.58 cv
269.243 1014.31 269.733 1013.97 270.112 1013.55 cv
270.489 1013.14 270.766 1012.67 270.94 1012.16 cv
271.114 1011.64 271.202 1011.13 271.202 1010.62 cv
271.202 1010.04 271.118 1009.5 270.951 1008.99 cv
270.784 1008.48 270.522 1008.04 270.166 1007.68 cv
269.81 1007.32 269.341 1007.03 268.76 1006.82 cv
268.179 1006.61 267.474 1006.5 266.646 1006.5 cv
266.297 1006.5 265.999 1006.52 265.752 1006.56 cv
265.504 1006.59 265.25 1006.63 264.989 1006.68 cv
264.989 1014.89 li
cp
264.989 1015.85 mo
264.989 1018.14 li
264.989 1018.62 265.05 1018.99 265.174 1019.25 cv
265.297 1019.52 265.472 1019.71 265.697 1019.83 cv
265.922 1019.96 266.188 1020.04 266.493 1020.07 cv
266.798 1020.11 267.139 1020.13 267.518 1020.15 cv
267.518 1020.85 li
264.727 1020.85 li
264.567 1020.83 264.356 1020.81 264.095 1020.77 cv
263.833 1020.73 263.575 1020.64 263.321 1020.5 cv
263.066 1020.35 262.845 1020.13 262.656 1019.84 cv
262.467 1019.55 262.373 1019.13 262.373 1018.58 cv
262.373 1014.89 li
262.373 1008.96 li
262.373 1008.75 262.369 1008.55 262.362 1008.39 cv
262.354 1008.22 262.329 1008.09 262.286 1008.01 cv
262.256 1007.61 262.177 1007.31 262.046 1007.09 cv
261.915 1006.87 261.737 1006.71 261.512 1006.61 cv
261.286 1006.51 261.028 1006.45 260.738 1006.44 cv
260.447 1006.42 260.142 1006.41 259.822 1006.41 cv
259.822 1005.63 li
267.692 1005.63 li
269 1005.63 270.071 1005.79 270.907 1006.11 cv
271.743 1006.43 272.393 1006.83 272.858 1007.32 cv
273.323 1007.81 273.643 1008.33 273.817 1008.89 cv
273.992 1009.45 274.079 1009.97 274.079 1010.45 cv
274.079 1011.04 273.981 1011.64 273.785 1012.22 cv
273.589 1012.81 273.301 1013.36 272.924 1013.86 cv
272.546 1014.36 272.07 1014.8 271.496 1015.17 cv
270.921 1015.54 270.235 1015.82 269.436 1016.03 cv
276.303 1020.85 li
271.943 1020.85 li
265.076 1015.85 li
264.989 1015.85 li
cp
f
289.927 1016.62 mo
289.709 1017.33 289.499 1018.03 289.295 1018.73 cv
289.091 1019.43 288.925 1020.13 288.794 1020.85 cv
279.354 1020.85 li
279.18 1020.85 278.958 1020.83 278.69 1020.81 cv
278.42 1020.79 278.159 1020.71 277.905 1020.56 cv
277.65 1020.42 277.433 1020.19 277.251 1019.88 cv
277.069 1019.56 276.979 1019.12 276.979 1018.56 cv
276.979 1014.85 li
276.979 1008.9 li
276.979 1008.32 276.938 1007.86 276.858 1007.54 cv
276.778 1007.21 276.641 1006.96 276.444 1006.8 cv
276.248 1006.63 275.979 1006.52 275.638 1006.48 cv
275.296 1006.44 274.864 1006.41 274.341 1006.41 cv
274.341 1005.61 li
287.9 1005.61 li
287.9 1009.77 li
287.377 1009.95 li
287.26 1009.29 287.097 1008.74 286.886 1008.3 cv
286.675 1007.86 286.388 1007.5 286.025 1007.23 cv
285.662 1006.96 285.222 1006.77 284.707 1006.67 cv
284.19 1006.56 283.583 1006.5 282.886 1006.5 cv
279.616 1006.5 li
279.616 1012.47 li
279.63 1012.63 279.656 1012.85 279.692 1013.11 cv
279.729 1013.37 279.823 1013.63 279.976 1013.89 cv
280.128 1014.15 280.361 1014.38 280.673 1014.57 cv
280.986 1014.76 281.433 1014.85 282.014 1014.85 cv
285.611 1014.85 li
285.611 1016.01 li
282.712 1016.01 li
281.905 1016.01 li
279.616 1016.01 li
279.616 1016.18 li
279.616 1016.95 279.642 1017.58 279.692 1018.07 cv
279.743 1018.55 279.867 1018.94 280.063 1019.22 cv
280.259 1019.5 280.55 1019.7 280.935 1019.81 cv
281.32 1019.92 281.854 1019.97 282.537 1019.97 cv
284.216 1019.97 li
284.899 1019.96 285.495 1019.91 286.003 1019.82 cv
286.512 1019.73 286.959 1019.57 287.344 1019.33 cv
287.729 1019.09 288.074 1018.75 288.379 1018.31 cv
288.685 1017.86 288.968 1017.27 289.23 1016.53 cv
289.927 1016.62 li
cp
f
304.686 1017.45 mo
304.686 1017.97 304.711 1018.4 304.762 1018.75 cv
304.813 1019.1 304.937 1019.38 305.133 1019.58 cv
305.329 1019.79 305.626 1019.93 306.026 1020.02 cv
306.426 1020.1 306.975 1020.15 307.672 1020.15 cv
307.672 1020.85 li
299.105 1020.85 li
299.105 1020.15 li
299.585 1020.15 299.999 1020.14 300.348 1020.12 cv
300.697 1020.09 300.98 1020.02 301.198 1019.89 cv
301.459 1019.76 301.656 1019.54 301.787 1019.25 cv
301.917 1018.96 301.983 1018.54 301.983 1017.97 cv
301.634 1008.07 li
298.146 1015.85 li
293.11 1008.7 li
293.198 1008.7 li
292.5 1020.85 li
291.235 1020.85 li
291.846 1008.7 li
291.846 1008.21 291.802 1007.82 291.715 1007.54 cv
291.628 1007.25 291.497 1007.02 291.323 1006.85 cv
291.105 1006.68 290.851 1006.56 290.56 1006.5 cv
290.269 1006.44 289.884 1006.41 289.404 1006.41 cv
289.404 1005.63 li
293.939 1005.63 li
298.844 1012.02 li
301.983 1005.63 li
304.163 1005.63 li
304.686 1017.45 li
cp
f
311.422 1018.14 mo
311.422 1018.62 311.483 1018.99 311.607 1019.25 cv
311.73 1019.52 311.905 1019.71 312.13 1019.83 cv
312.355 1019.96 312.621 1020.04 312.926 1020.07 cv
313.231 1020.11 313.573 1020.13 313.951 1020.15 cv
313.951 1020.85 li
306.255 1020.85 li
306.255 1020.15 li
306.604 1020.13 306.927 1020.11 307.226 1020.07 cv
307.523 1020.04 307.785 1019.96 308.01 1019.83 cv
308.235 1019.71 308.41 1019.52 308.533 1019.25 cv
308.657 1018.99 308.719 1018.62 308.719 1018.14 cv
308.719 1008.44 li
308.719 1007.96 308.657 1007.59 308.533 1007.32 cv
308.41 1007.05 308.235 1006.85 308.01 1006.73 cv
307.785 1006.61 307.523 1006.53 307.226 1006.5 cv
306.927 1006.47 306.604 1006.44 306.255 1006.41 cv
306.255 1005.63 li
309.155 1005.63 li
309.3 1005.66 309.503 1005.69 309.765 1005.72 cv
310.027 1005.75 310.277 1005.83 310.517 1005.98 cv
310.757 1006.12 310.967 1006.35 311.149 1006.64 cv
311.331 1006.94 311.422 1007.37 311.422 1007.92 cv
311.422 1008.09 li
311.422 1008.27 li
311.422 1018.14 li
cp
f
330.453 1006.41 mo
330.278 1006.41 330.079 1006.43 329.854 1006.46 cv
329.628 1006.49 329.436 1006.54 329.276 1006.61 cv
328.883 1006.81 328.629 1007.12 328.513 1007.53 cv
328.396 1007.93 328.331 1008.35 328.316 1008.77 cv
328.302 1009.07 328.291 1009.44 328.284 1009.87 cv
328.276 1010.3 328.273 1010.67 328.273 1010.97 cv
328.273 1014.57 li
328.273 1015.69 328.087 1016.66 327.717 1017.49 cv
327.346 1018.32 326.837 1019 326.191 1019.55 cv
325.544 1020.09 324.777 1020.5 323.891 1020.76 cv
323.004 1021.02 322.053 1021.15 321.036 1021.15 cv
320.338 1021.15 319.647 1021.09 318.964 1020.97 cv
318.281 1020.84 317.642 1020.64 317.046 1020.36 cv
316.45 1020.07 315.916 1019.69 315.444 1019.22 cv
314.971 1018.75 314.59 1018.16 314.299 1017.47 cv
314.082 1016.94 313.929 1016.41 313.842 1015.86 cv
313.754 1015.32 313.696 1014.76 313.667 1014.2 cv
313.667 1005.63 li
318.964 1005.63 li
318.964 1006.41 li
318.586 1006.41 318.245 1006.44 317.94 1006.48 cv
317.635 1006.52 317.366 1006.61 317.133 1006.75 cv
316.901 1006.89 316.723 1007.09 316.599 1007.36 cv
316.476 1007.63 316.414 1007.98 316.414 1008.42 cv
316.414 1013.59 li
316.414 1014.47 316.486 1015.31 316.632 1016.09 cv
316.777 1016.88 317.035 1017.56 317.406 1018.14 cv
317.776 1018.72 318.289 1019.18 318.943 1019.52 cv
319.597 1019.85 320.432 1020.02 321.45 1020.02 cv
323.165 1020.02 324.439 1019.54 325.275 1018.6 cv
326.111 1017.66 326.529 1016.31 326.529 1014.57 cv
326.529 1010.97 li
326.507 1007.85 li
326.507 1007.27 326.634 1006.83 326.889 1006.52 cv
327.143 1006.22 327.423 1006 327.728 1005.87 cv
328.033 1005.74 328.309 1005.67 328.556 1005.65 cv
328.803 1005.64 329.436 1005.63 330.453 1005.63 cv
330.453 1006.41 li
cp
f
345.778 1017.45 mo
345.778 1017.97 345.803 1018.4 345.854 1018.75 cv
345.905 1019.1 346.028 1019.38 346.225 1019.58 cv
346.421 1019.79 346.718 1019.93 347.118 1020.02 cv
347.518 1020.1 348.066 1020.15 348.764 1020.15 cv
348.764 1020.85 li
340.197 1020.85 li
340.197 1020.15 li
340.677 1020.15 341.091 1020.14 341.439 1020.12 cv
341.789 1020.09 342.072 1020.02 342.29 1019.89 cv
342.551 1019.76 342.748 1019.54 342.878 1019.25 cv
343.009 1018.96 343.075 1018.54 343.075 1017.97 cv
342.726 1008.07 li
339.238 1015.85 li
334.202 1008.7 li
334.29 1008.7 li
333.592 1020.85 li
332.327 1020.85 li
332.938 1008.7 li
332.938 1008.21 332.894 1007.82 332.807 1007.54 cv
332.72 1007.25 332.589 1007.02 332.415 1006.85 cv
332.197 1006.68 331.942 1006.56 331.651 1006.5 cv
331.361 1006.44 330.976 1006.41 330.496 1006.41 cv
330.496 1005.63 li
335.031 1005.63 li
339.936 1012.02 li
343.075 1005.63 li
345.254 1005.63 li
345.778 1017.45 li
cp
f
355.827 1010.19 mo
355.827 1010.91 355.969 1011.48 356.252 1011.89 cv
356.536 1012.29 356.91 1012.6 357.375 1012.8 cv
357.84 1013 358.37 1013.14 358.966 1013.19 cv
359.562 1013.25 360.172 1013.29 360.797 1013.31 cv
361.422 1013.34 362.032 1013.38 362.628 1013.43 cv
363.224 1013.49 363.754 1013.62 364.22 1013.82 cv
364.685 1014.01 365.059 1014.31 365.342 1014.72 cv
365.626 1015.13 365.768 1015.69 365.768 1016.4 cv
365.768 1017.34 365.553 1018.13 365.125 1018.75 cv
364.696 1019.38 364.14 1019.88 363.457 1020.26 cv
362.773 1020.63 362.003 1020.9 361.146 1021.06 cv
360.289 1021.22 359.438 1021.3 358.596 1021.3 cv
357.84 1021.3 357.084 1021.22 356.328 1021.05 cv
355.573 1020.89 354.868 1020.65 354.214 1020.34 cv
353.604 1016.14 li
354.301 1016.14 li
354.402 1016.69 354.581 1017.21 354.835 1017.68 cv
355.089 1018.16 355.409 1018.58 355.794 1018.94 cv
356.179 1019.29 356.623 1019.57 357.124 1019.78 cv
357.625 1019.98 358.174 1020.08 358.77 1020.08 cv
359.337 1020.08 359.878 1020.05 360.394 1019.97 cv
360.91 1019.9 361.378 1019.77 361.8 1019.57 cv
362.221 1019.37 362.577 1019.1 362.868 1018.75 cv
363.159 1018.4 363.362 1017.95 363.479 1017.38 cv
363.609 1016.77 363.566 1016.3 363.348 1015.98 cv
363.13 1015.67 362.795 1015.43 362.345 1015.28 cv
361.895 1015.12 361.364 1015.03 360.754 1014.98 cv
360.143 1014.94 359.507 1014.89 358.846 1014.85 cv
358.185 1014.81 357.531 1014.73 356.884 1014.62 cv
356.237 1014.51 355.66 1014.31 355.151 1014.02 cv
354.642 1013.73 354.228 1013.32 353.909 1012.78 cv
353.589 1012.24 353.429 1011.53 353.429 1010.64 cv
353.429 1009.71 353.625 1008.91 354.018 1008.25 cv
354.41 1007.58 354.93 1007.03 355.576 1006.61 cv
356.223 1006.19 356.968 1005.88 357.811 1005.68 cv
358.653 1005.49 359.525 1005.39 360.427 1005.39 cv
360.688 1005.39 360.972 1005.41 361.277 1005.46 cv
361.539 1005.48 361.844 1005.54 362.192 1005.61 cv
362.541 1005.68 362.912 1005.78 363.304 1005.91 cv
363.304 1008.77 li
362.672 1008.77 li
362.556 1008.17 362.337 1007.71 362.018 1007.37 cv
361.698 1007.04 361.317 1006.81 360.874 1006.69 cv
360.43 1006.56 359.947 1006.53 359.424 1006.6 cv
358.901 1006.67 358.377 1006.8 357.854 1007 cv
357.171 1007.29 356.663 1007.71 356.328 1008.26 cv
355.994 1008.8 355.827 1009.44 355.827 1010.19 cv
cp
f
380.046 1005.63 mo
379.872 1009.21 li
379.174 1009.21 li
379.145 1008.84 379.12 1008.51 379.098 1008.2 cv
379.076 1007.9 379 1007.64 378.869 1007.43 cv
378.738 1007.22 378.527 1007.05 378.237 1006.94 cv
377.946 1006.82 377.525 1006.76 376.973 1006.76 cv
373.485 1006.76 li
373.485 1020.85 li
370.869 1020.85 li
370.869 1008.68 li
370.869 1008.23 370.807 1007.88 370.684 1007.61 cv
370.56 1007.35 370.389 1007.16 370.171 1007.04 cv
369.953 1006.91 369.699 1006.84 369.408 1006.81 cv
369.117 1006.78 368.812 1006.76 368.493 1006.76 cv
364.481 1006.76 li
364.481 1005.63 li
380.046 1005.63 li
cp
f
388.33 1019.91 mo
390.059 1019.91 391.422 1019.37 392.417 1018.31 cv
393.413 1017.24 393.911 1015.7 393.911 1013.7 cv
393.911 1012.93 393.78 1012.12 393.518 1011.28 cv
393.257 1010.43 392.878 1009.66 392.385 1008.95 cv
391.891 1008.25 391.269 1007.66 390.521 1007.2 cv
389.772 1006.73 388.897 1006.5 387.894 1006.5 cv
387.007 1006.5 386.227 1006.64 385.551 1006.92 cv
384.875 1007.19 384.312 1007.6 383.861 1008.15 cv
383.411 1008.69 383.055 1009.34 382.793 1010.1 cv
382.531 1010.85 382.4 1011.71 382.4 1012.67 cv
382.4 1013.47 382.527 1014.31 382.782 1015.19 cv
383.036 1016.07 383.403 1016.85 383.883 1017.52 cv
384.362 1018.2 384.973 1018.76 385.714 1019.22 cv
386.455 1019.68 387.327 1019.91 388.33 1019.91 cv
cp
388.177 1005.3 mo
389.354 1005.3 390.452 1005.52 391.469 1005.96 cv
392.486 1006.39 393.376 1006.97 394.14 1007.69 cv
394.902 1008.41 395.509 1009.23 395.96 1010.16 cv
396.41 1011.09 396.636 1012.07 396.636 1013.08 cv
396.636 1014.09 396.429 1015.07 396.014 1016.03 cv
395.6 1016.99 395.022 1017.84 394.281 1018.59 cv
393.54 1019.34 392.65 1019.95 391.611 1020.42 cv
390.572 1020.89 389.398 1021.13 388.09 1021.13 cv
386.913 1021.13 385.815 1020.91 384.798 1020.48 cv
383.781 1020.04 382.898 1019.46 382.15 1018.74 cv
381.401 1018.02 380.805 1017.19 380.362 1016.25 cv
379.919 1015.3 379.697 1014.31 379.697 1013.26 cv
379.697 1012.26 379.901 1011.28 380.308 1010.34 cv
380.714 1009.39 381.289 1008.55 382.03 1007.81 cv
382.771 1007.07 383.657 1006.47 384.689 1006 cv
385.721 1005.54 386.884 1005.3 388.177 1005.3 cv
cp
f
400.909 1014.89 mo
401.126 1014.94 401.374 1014.96 401.65 1014.97 cv
401.926 1014.98 402.173 1014.98 402.391 1014.98 cv
403.234 1014.98 403.957 1014.85 404.56 1014.58 cv
405.163 1014.31 405.653 1013.97 406.032 1013.55 cv
406.409 1013.14 406.686 1012.67 406.86 1012.16 cv
407.034 1011.64 407.122 1011.13 407.122 1010.62 cv
407.122 1010.04 407.038 1009.5 406.871 1008.99 cv
406.704 1008.48 406.442 1008.04 406.086 1007.68 cv
405.73 1007.32 405.261 1007.03 404.68 1006.82 cv
404.099 1006.61 403.394 1006.5 402.565 1006.5 cv
402.217 1006.5 401.918 1006.52 401.672 1006.56 cv
401.424 1006.59 401.17 1006.63 400.909 1006.68 cv
400.909 1014.89 li
cp
400.909 1015.85 mo
400.909 1018.14 li
400.909 1018.62 400.97 1018.99 401.094 1019.25 cv
401.217 1019.52 401.392 1019.71 401.617 1019.83 cv
401.842 1019.96 402.107 1020.04 402.413 1020.07 cv
402.718 1020.11 403.059 1020.13 403.438 1020.15 cv
403.438 1020.85 li
400.647 1020.85 li
400.487 1020.83 400.276 1020.81 400.015 1020.77 cv
399.753 1020.73 399.495 1020.64 399.241 1020.5 cv
398.986 1020.35 398.765 1020.13 398.576 1019.84 cv
398.387 1019.55 398.292 1019.13 398.292 1018.58 cv
398.292 1014.89 li
398.292 1008.96 li
398.292 1008.75 398.289 1008.55 398.282 1008.39 cv
398.274 1008.22 398.249 1008.09 398.206 1008.01 cv
398.176 1007.61 398.097 1007.31 397.966 1007.09 cv
397.835 1006.87 397.657 1006.71 397.432 1006.61 cv
397.206 1006.51 396.948 1006.45 396.658 1006.44 cv
396.367 1006.42 396.062 1006.41 395.742 1006.41 cv
395.742 1005.63 li
403.612 1005.63 li
404.92 1005.63 405.991 1005.79 406.827 1006.11 cv
407.663 1006.43 408.313 1006.83 408.778 1007.32 cv
409.243 1007.81 409.563 1008.33 409.737 1008.89 cv
409.912 1009.45 409.999 1009.97 409.999 1010.45 cv
409.999 1011.04 409.901 1011.64 409.705 1012.22 cv
409.509 1012.81 409.221 1013.36 408.844 1013.86 cv
408.466 1014.36 407.99 1014.8 407.416 1015.17 cv
406.841 1015.54 406.155 1015.82 405.356 1016.03 cv
412.223 1020.85 li
407.863 1020.85 li
400.996 1015.85 li
400.909 1015.85 li
cp
f
425.847 1016.62 mo
425.629 1017.33 425.418 1018.03 425.215 1018.73 cv
425.011 1019.43 424.844 1020.13 424.713 1020.85 cv
415.274 1020.85 li
415.1 1020.85 414.878 1020.83 414.609 1020.81 cv
414.34 1020.79 414.079 1020.71 413.824 1020.56 cv
413.57 1020.42 413.352 1020.19 413.17 1019.88 cv
412.988 1019.56 412.898 1019.12 412.898 1018.56 cv
412.898 1014.85 li
412.898 1008.9 li
412.898 1008.32 412.858 1007.86 412.778 1007.54 cv
412.698 1007.21 412.56 1006.96 412.364 1006.8 cv
412.167 1006.63 411.898 1006.52 411.557 1006.48 cv
411.215 1006.44 410.783 1006.41 410.26 1006.41 cv
410.26 1005.61 li
423.819 1005.61 li
423.819 1009.77 li
423.296 1009.95 li
423.18 1009.29 423.016 1008.74 422.806 1008.3 cv
422.595 1007.86 422.308 1007.5 421.945 1007.23 cv
421.581 1006.96 421.142 1006.77 420.626 1006.67 cv
420.11 1006.56 419.503 1006.5 418.806 1006.5 cv
415.536 1006.5 li
415.536 1012.47 li
415.55 1012.63 415.576 1012.85 415.612 1013.11 cv
415.648 1013.37 415.743 1013.63 415.896 1013.89 cv
416.048 1014.15 416.28 1014.38 416.593 1014.57 cv
416.905 1014.76 417.352 1014.85 417.934 1014.85 cv
421.53 1014.85 li
421.53 1016.01 li
418.631 1016.01 li
417.825 1016.01 li
415.536 1016.01 li
415.536 1016.18 li
415.536 1016.95 415.561 1017.58 415.612 1018.07 cv
415.663 1018.55 415.786 1018.94 415.982 1019.22 cv
416.179 1019.5 416.469 1019.7 416.854 1019.81 cv
417.239 1019.92 417.773 1019.97 418.457 1019.97 cv
420.135 1019.97 li
420.818 1019.96 421.414 1019.91 421.923 1019.82 cv
422.432 1019.73 422.878 1019.57 423.264 1019.33 cv
423.648 1019.09 423.994 1018.75 424.299 1018.31 cv
424.604 1017.86 424.888 1017.27 425.149 1016.53 cv
425.847 1016.62 li
cp
f
931.891 793.883 mo
931.891 795.538 933.237 796.885 934.893 796.885 cv
936.548 796.885 937.895 795.538 937.895 793.883 cv
937.895 792.228 936.548 790.881 934.893 790.881 cv
933.237 790.881 931.891 792.228 931.891 793.883 cv
cp
928.616 793.883 mo
928.616 790.422 931.432 787.606 934.893 787.606 cv
938.353 787.606 941.169 790.422 941.169 793.883 cv
941.169 797.344 938.353 800.16 934.893 800.16 cv
931.432 800.16 928.616 797.344 928.616 793.883 cv
cp
f
906.054 793.883 mo
906.054 795.538 907.4 796.885 909.055 796.885 cv
910.711 796.885 912.057 795.538 912.057 793.883 cv
912.057 792.228 910.711 790.881 909.055 790.881 cv
907.4 790.881 906.054 792.228 906.054 793.883 cv
cp
902.779 793.883 mo
902.779 790.422 905.595 787.606 909.055 787.606 cv
912.516 787.606 915.332 790.422 915.332 793.883 cv
915.332 797.344 912.516 800.16 909.055 800.16 cv
905.595 800.16 902.779 797.344 902.779 793.883 cv
cp
f
6.71994 lw
769.628 793.883 mo
865.323 793.883 li
892.962 839.235 li
949.607 839.235 li
949.611 839.238 li
956.895 825.744 961.021 810.288 961.021 793.878 cv
961.021 741.033 918.175 698.186 865.329 698.186 cv
812.47 698.186 769.624 741.033 769.624 793.878 cv
769.628 793.883 li
cp
@
945.675 817.391 mo
898.273 817.391 li
897.101 817.391 896.014 816.78 895.404 815.779 cv
873.257 779.439 li
795.063 779.439 li
793.207 779.439 791.703 777.935 791.703 776.079 cv
791.703 774.224 793.207 772.719 795.063 772.719 cv
875.144 772.719 li
876.317 772.719 877.403 773.33 878.014 774.331 cv
900.161 810.671 li
945.675 810.671 li
947.531 810.671 949.035 812.175 949.035 814.031 cv
949.035 815.887 947.531 817.391 945.675 817.391 cv
cp
f
873.708 850.947 mo
857.794 793.883 li
873.708 850.947 li
cp
@
938.209 839.235 mo
883.08 855.255 li
938.209 839.235 li
cp
@
869.197 867.557 mo
880.358 867.557 li
881.865 867.557 883.086 866.336 883.086 864.83 cv
883.086 853.668 li
883.086 852.162 881.865 850.941 880.358 850.941 cv
869.197 850.941 li
867.691 850.941 866.469 852.162 866.469 853.668 cv
866.469 864.83 li
866.469 866.336 867.691 867.557 869.197 867.557 cv
cp
@
874.778 867.557 mo
874.778 905.658 li
874.778 867.557 li
cp
@
5.27995 lw
893.634 727.243 mo
870.369 716.156 li
893.634 727.243 li
cp
@
876.955 736.146 mo
853.69 725.058 li
876.955 736.146 li
cp
@
703.532 996.475 mo
693.891 974.608 li
692.703 974.608 li
692.703 996.475 li
687.953 996.475 li
687.953 947.573 li
692.703 947.573 li
692.703 969.579 li
693.821 969.579 li
695.451 965.946 697.093 962.303 698.746 958.646 cv
700.399 954.99 702.04 951.346 703.671 947.713 cv
708.911 947.713 li
698.222 972.164 li
708.771 996.475 li
703.532 996.475 li
cp
f
733.57 952.953 mo
733.5 952.953 li
732.568 957.191 731.649 961.371 730.741 965.492 cv
729.833 969.614 728.913 973.795 727.982 978.032 cv
738.95 978.032 li
733.57 952.953 li
cp
723.72 996.404 mo
718.97 996.404 li
730.147 947.504 li
736.784 947.504 li
747.961 996.404 li
743.281 996.404 li
740.207 983.062 li
726.724 983.062 li
723.72 996.404 li
cp
f
772.412 974.679 mo
771.643 974.679 li
771.643 996.475 li
767.103 996.475 li
767.103 974.679 li
766.544 974.679 li
755.227 947.573 li
759.977 947.573 li
769.408 969.648 li
778.839 947.573 li
783.589 947.573 li
772.412 974.679 li
cp
f
805.454 952.953 mo
805.385 952.953 li
804.452 957.191 803.534 961.371 802.625 965.492 cv
801.717 969.614 800.797 973.795 799.866 978.032 cv
810.834 978.032 li
805.454 952.953 li
cp
795.604 996.404 mo
790.854 996.404 li
802.032 947.504 li
808.668 947.504 li
819.846 996.404 li
815.165 996.404 li
812.091 983.062 li
798.609 983.062 li
795.604 996.404 li
cp
f
849.396 996.475 mo
839.755 974.608 li
838.568 974.608 li
838.568 996.475 li
833.817 996.475 li
833.817 947.573 li
838.568 947.573 li
838.568 969.579 li
839.685 969.579 li
841.315 965.946 842.957 962.303 844.611 958.646 cv
846.263 954.99 847.905 951.346 849.535 947.713 cv
854.775 947.713 li
844.087 972.164 li
854.635 996.475 li
849.396 996.475 li
cp
f
915.342 981.944 mo
915.342 983.9 914.992 985.764 914.294 987.532 cv
913.595 989.303 912.64 990.84 911.43 992.144 cv
910.218 993.448 908.798 994.483 907.168 995.252 cv
905.537 996.021 903.768 996.404 901.859 996.404 cv
900.043 996.404 898.249 996.16 896.48 995.671 cv
894.709 995.183 893.127 994.636 891.729 994.029 cv
890.099 993.331 888.562 992.54 887.119 991.654 cv
888.795 987.044 li
890.425 987.882 892.009 988.604 893.546 989.209 cv
894.896 989.769 896.316 990.27 897.807 990.711 cv
899.297 991.154 900.624 991.375 901.789 991.375 cv
903 991.375 904.14 991.131 905.212 990.642 cv
906.283 990.152 907.203 989.488 907.971 988.65 cv
908.74 987.813 909.345 986.834 909.788 985.717 cv
910.23 984.599 910.451 983.388 910.451 982.084 cv
910.451 980.78 910.148 979.686 909.543 978.801 cv
908.938 977.916 908.157 977.183 907.203 976.6 cv
906.248 976.018 905.2 975.563 904.059 975.237 cv
902.918 974.912 901.812 974.656 900.742 974.469 cv
898.971 974.189 897.318 973.689 895.781 972.967 cv
894.244 972.246 892.905 971.325 891.764 970.208 cv
890.623 969.09 889.715 967.774 889.04 966.261 cv
888.364 964.748 888.027 963.036 888.027 961.126 cv
888.027 959.17 888.376 957.331 889.075 955.607 cv
889.773 953.885 890.727 952.383 891.939 951.102 cv
893.15 949.821 894.559 948.796 896.165 948.027 cv
897.772 947.259 899.484 946.875 901.3 946.875 cv
902.418 946.875 903.581 947.004 904.793 947.259 cv
906.004 947.516 907.144 947.808 908.216 948.133 cv
909.427 948.506 910.637 948.925 911.849 949.39 cv
910.312 954.141 li
909.24 953.721 908.169 953.349 907.098 953.022 cv
906.166 952.743 905.177 952.476 904.129 952.219 cv
903.081 951.964 902.092 951.835 901.16 951.835 cv
899.996 951.835 898.901 952.092 897.877 952.604 cv
896.852 953.116 895.967 953.791 895.222 954.629 cv
894.477 955.468 893.895 956.435 893.476 957.528 cv
893.057 958.623 892.847 959.753 892.847 960.917 cv
892.847 962.268 893.127 963.443 893.685 964.444 cv
894.244 965.446 894.954 966.296 895.816 966.994 cv
896.678 967.692 897.62 968.252 898.645 968.671 cv
899.669 969.09 900.647 969.394 901.579 969.579 cv
903.489 969.905 905.282 970.371 906.959 970.977 cv
908.635 971.582 910.09 972.373 911.325 973.352 cv
912.558 974.329 913.536 975.517 914.259 976.914 cv
914.98 978.312 915.342 979.988 915.342 981.944 cv
cp
f
934.133 947.573 mo
934.133 969.3 li
949.851 969.3 li
949.851 947.573 li
954.742 947.573 li
954.742 996.404 li
949.851 996.404 li
949.851 974.26 li
934.133 974.26 li
934.133 996.404 li
929.313 996.404 li
929.313 947.573 li
934.133 947.573 li
cp
f
994.141 960.148 mo
994.141 958.426 993.815 957.039 993.163 955.991 cv
992.511 954.943 991.707 954.129 990.753 953.547 cv
989.798 952.965 988.808 952.58 987.784 952.394 cv
986.759 952.208 985.898 952.114 985.199 952.114 cv
984.501 952.114 983.638 952.219 982.615 952.429 cv
981.59 952.639 980.612 953.034 979.68 953.616 cv
978.748 954.199 977.945 955.014 977.27 956.062 cv
976.595 957.109 976.257 958.495 976.257 960.218 cv
976.257 984.249 li
976.257 986.02 976.595 987.405 977.27 988.406 cv
977.945 989.408 978.748 990.177 979.68 990.711 cv
980.612 991.247 981.59 991.585 982.615 991.725 cv
983.638 991.864 984.501 991.934 985.199 991.934 cv
985.898 991.934 986.759 991.853 987.784 991.689 cv
988.808 991.526 989.798 991.178 990.753 990.642 cv
991.707 990.106 992.511 989.338 993.163 988.336 cv
993.815 987.335 994.141 985.973 994.141 984.249 cv
994.141 960.148 li
cp
998.822 984.249 mo
998.822 985.274 998.623 986.52 998.228 987.986 cv
997.832 989.454 997.11 990.863 996.062 992.213 cv
995.014 993.564 993.605 994.717 991.836 995.671 cv
990.065 996.625 987.83 997.104 985.129 997.104 cv
982.475 997.104 980.285 996.625 978.563 995.671 cv
976.839 994.717 975.454 993.564 974.406 992.213 cv
973.358 990.863 972.625 989.454 972.205 987.986 cv
971.786 986.52 971.577 985.274 971.577 984.249 cv
971.577 960.218 li
971.577 959.194 971.774 957.925 972.171 956.411 cv
972.566 954.897 973.276 953.441 974.301 952.045 cv
975.325 950.647 976.722 949.449 978.493 948.447 cv
980.262 947.446 982.498 946.945 985.199 946.945 cv
987.854 946.945 990.055 947.434 991.801 948.412 cv
993.547 949.39 994.945 950.577 995.992 951.975 cv
997.04 953.372 997.774 954.828 998.193 956.341 cv
998.612 957.854 998.822 959.124 998.822 960.148 cv
998.822 984.249 li
cp
f
1027.39 951.835 mo
1026.65 951.835 1025.86 951.917 1025.02 952.079 cv
1024.18 952.243 1023.41 952.44 1022.71 952.673 cv
1021.87 952.907 1021.06 953.162 1020.27 953.441 cv
1020.27 971.954 li
1027.39 971.954 li
1030.56 971.954 1033.1 971.081 1035.01 969.335 cv
1036.92 967.588 1037.87 964.992 1037.87 961.545 cv
1037.87 958.146 1036.89 955.677 1034.94 954.141 cv
1032.98 952.604 1030.47 951.835 1027.39 951.835 cv
cp
1027.95 946.875 mo
1029.91 946.875 1031.77 947.225 1033.54 947.923 cv
1035.31 948.621 1036.87 949.611 1038.22 950.892 cv
1039.57 952.173 1040.65 953.71 1041.47 955.503 cv
1042.28 957.296 1042.69 959.31 1042.69 961.545 cv
1042.69 963.78 1042.32 965.842 1041.57 967.728 cv
1040.83 969.614 1039.79 971.245 1038.47 972.618 cv
1037.14 973.992 1035.57 975.052 1033.75 975.797 cv
1031.93 976.542 1029.98 976.914 1027.88 976.914 cv
1020.2 976.914 li
1020.2 996.475 li
1015.59 996.475 li
1015.59 949.739 li
1016.84 949.228 1018.17 948.761 1019.57 948.342 cv
1020.78 947.97 1022.11 947.633 1023.55 947.329 cv
1024.99 947.026 1026.46 946.875 1027.95 946.875 cv
cp
f
765.385 1026.67 mo
765.385 1037.07 li
770.253 1037.07 li
771.002 1037.07 771.632 1036.94 772.146 1036.68 cv
772.659 1036.41 773.068 1036.05 773.373 1035.6 cv
773.678 1035.14 773.894 1034.6 774.018 1033.97 cv
774.143 1033.35 774.206 1032.69 774.206 1032 cv
774.206 1031.28 774.143 1030.59 774.018 1029.94 cv
773.894 1029.29 773.678 1028.72 773.373 1028.23 cv
773.068 1027.75 772.659 1027.36 772.146 1027.09 cv
771.632 1026.81 771.002 1026.67 770.253 1026.67 cv
765.385 1026.67 li
cp
773.249 1018.64 mo
773.192 1017.97 773.075 1017.33 772.895 1016.71 cv
772.714 1016.08 772.451 1015.53 772.105 1015.04 cv
771.757 1014.56 771.335 1014.17 770.836 1013.88 cv
770.336 1013.59 769.753 1013.44 769.088 1013.44 cv
768.81 1013.44 768.387 1013.48 767.819 1013.56 cv
767.25 1013.65 766.439 1013.91 765.385 1014.36 cv
765.385 1023.76 li
769.296 1023.76 li
770.072 1023.76 770.711 1023.62 771.21 1023.34 cv
771.709 1023.07 772.111 1022.7 772.417 1022.24 cv
772.721 1021.78 772.937 1021.24 773.061 1020.62 cv
773.186 1019.99 773.249 1019.33 773.249 1018.64 cv
cp
769.421 1010.49 mo
770.336 1010.49 771.036 1010.59 771.522 1010.8 cv
772.007 1011.01 772.347 1011.18 772.541 1011.32 cv
772.583 1011.36 li
773.582 1011.97 774.455 1012.91 775.204 1014.17 cv
775.953 1015.43 776.327 1016.87 776.327 1018.47 cv
776.327 1019.08 776.307 1019.69 776.265 1020.28 cv
776.223 1020.88 776.119 1021.46 775.953 1022.03 cv
775.787 1022.6 775.544 1023.16 775.225 1023.7 cv
774.906 1024.24 774.469 1024.74 773.914 1025.21 cv
774.635 1025.71 775.211 1026.23 775.641 1026.75 cv
776.07 1027.28 776.396 1027.82 776.619 1028.38 cv
776.84 1028.93 776.986 1029.51 777.056 1030.1 cv
777.125 1030.7 777.16 1031.33 777.16 1032 cv
777.187 1032.86 777.111 1033.65 776.931 1034.37 cv
776.75 1035.09 776.535 1035.72 776.286 1036.26 cv
776.036 1036.8 775.787 1037.24 775.537 1037.57 cv
775.287 1037.9 775.107 1038.11 774.996 1038.2 cv
774.497 1038.67 773.873 1039.09 773.124 1039.46 cv
772.375 1039.84 771.418 1040.03 770.253 1040.03 cv
762.514 1040.03 li
762.514 1012.15 li
763.596 1011.73 764.553 1011.41 765.385 1011.17 cv
766.217 1010.94 766.799 1010.79 767.132 1010.74 cv
767.881 1010.57 768.644 1010.49 769.421 1010.49 cv
cp
f
794.426 1010.9 mo
794.426 1013.81 li
785.231 1013.81 li
785.231 1023.92 li
792.429 1023.92 li
792.429 1026.84 li
785.231 1026.84 li
785.231 1037.03 li
794.509 1037.03 li
794.509 1039.98 li
782.36 1039.98 li
782.36 1010.9 li
794.426 1010.9 li
cp
f
814.48 1031.37 mo
814.48 1032.54 814.272 1033.65 813.856 1034.7 cv
813.44 1035.75 812.871 1036.67 812.15 1037.45 cv
811.428 1038.22 810.583 1038.84 809.612 1039.3 cv
808.641 1039.76 807.587 1039.98 806.45 1039.98 cv
805.368 1039.98 804.3 1039.84 803.246 1039.55 cv
802.192 1039.26 801.249 1038.93 800.417 1038.57 cv
799.446 1038.15 798.53 1037.68 797.671 1037.16 cv
798.669 1034.41 li
799.64 1034.91 800.584 1035.34 801.499 1035.7 cv
802.303 1036.03 803.149 1036.33 804.037 1036.59 cv
804.924 1036.86 805.715 1036.99 806.408 1036.99 cv
807.129 1036.99 807.809 1036.84 808.447 1036.55 cv
809.085 1036.26 809.633 1035.87 810.09 1035.37 cv
810.548 1034.87 810.908 1034.29 811.172 1033.62 cv
811.436 1032.95 811.567 1032.23 811.567 1031.46 cv
811.567 1030.68 811.387 1030.03 811.027 1029.5 cv
810.666 1028.97 810.201 1028.54 809.633 1028.19 cv
809.064 1027.84 808.44 1027.57 807.761 1027.38 cv
807.081 1027.18 806.422 1027.03 805.784 1026.92 cv
804.73 1026.75 803.746 1026.46 802.83 1026.03 cv
801.915 1025.6 801.117 1025.05 800.438 1024.38 cv
799.758 1023.72 799.217 1022.93 798.815 1022.03 cv
798.413 1021.13 798.212 1020.11 798.212 1018.97 cv
798.212 1017.81 798.42 1016.71 798.836 1015.69 cv
799.252 1014.66 799.82 1013.77 800.542 1013 cv
801.263 1012.24 802.102 1011.63 803.059 1011.17 cv
804.016 1010.71 805.035 1010.49 806.117 1010.49 cv
806.783 1010.49 807.476 1010.56 808.197 1010.71 cv
808.919 1010.87 809.598 1011.04 810.236 1011.23 cv
810.957 1011.46 811.678 1011.71 812.399 1011.98 cv
811.484 1014.81 li
810.846 1014.56 810.208 1014.34 809.57 1014.15 cv
809.015 1013.98 808.426 1013.82 807.802 1013.67 cv
807.178 1013.52 806.588 1013.44 806.034 1013.44 cv
805.34 1013.44 804.688 1013.59 804.078 1013.9 cv
803.468 1014.2 802.941 1014.6 802.498 1015.1 cv
802.053 1015.6 801.707 1016.18 801.457 1016.83 cv
801.208 1017.48 801.083 1018.16 801.083 1018.85 cv
801.083 1019.65 801.249 1020.35 801.582 1020.95 cv
801.915 1021.55 802.337 1022.05 802.851 1022.47 cv
803.364 1022.88 803.926 1023.22 804.536 1023.47 cv
805.146 1023.72 805.729 1023.9 806.284 1024.01 cv
807.42 1024.2 808.489 1024.48 809.487 1024.84 cv
810.486 1025.2 811.353 1025.67 812.087 1026.25 cv
812.822 1026.84 813.405 1027.54 813.835 1028.38 cv
814.265 1029.21 814.48 1030.21 814.48 1031.37 cv
cp
f
832.288 1013.69 mo
825.755 1013.69 li
825.755 1040.03 li
822.968 1040.03 li
822.968 1013.69 li
816.228 1013.69 li
816.228 1010.9 li
832.288 1010.9 li
832.288 1013.69 li
cp
f
844.686 1010.9 mo
847.391 1010.9 li
847.391 1040.03 li
844.686 1040.03 li
844.686 1010.9 li
cp
f
870.523 1010.9 mo
870.523 1040.03 li
866.113 1040.03 li
856.419 1016.27 li
856.377 1016.27 li
856.377 1040.03 li
853.714 1040.03 li
853.714 1010.9 li
857.126 1010.9 li
867.736 1036.66 li
867.819 1036.66 li
867.819 1010.9 li
870.523 1010.9 li
cp
f
900.605 1031.37 mo
900.605 1032.54 900.397 1033.65 899.981 1034.7 cv
899.565 1035.75 898.996 1036.67 898.274 1037.45 cv
897.553 1038.22 896.707 1038.84 895.736 1039.3 cv
894.765 1039.76 893.711 1039.98 892.574 1039.98 cv
891.493 1039.98 890.424 1039.84 889.371 1039.55 cv
888.316 1039.26 887.374 1038.93 886.542 1038.57 cv
885.57 1038.15 884.655 1037.68 883.795 1037.16 cv
884.794 1034.41 li
885.765 1034.91 886.708 1035.34 887.623 1035.7 cv
888.427 1036.03 889.273 1036.33 890.161 1036.59 cv
891.049 1036.86 891.839 1036.99 892.533 1036.99 cv
893.254 1036.99 893.933 1036.84 894.571 1036.55 cv
895.21 1036.26 895.757 1035.87 896.215 1035.37 cv
896.673 1034.87 897.033 1034.29 897.297 1033.62 cv
897.56 1032.95 897.692 1032.23 897.692 1031.46 cv
897.692 1030.68 897.511 1030.03 897.151 1029.5 cv
896.791 1028.97 896.326 1028.54 895.757 1028.19 cv
895.189 1027.84 894.565 1027.57 893.885 1027.38 cv
893.205 1027.18 892.546 1027.03 891.909 1026.92 cv
890.855 1026.75 889.87 1026.46 888.955 1026.03 cv
888.04 1025.6 887.242 1025.05 886.563 1024.38 cv
885.882 1023.72 885.341 1022.93 884.94 1022.03 cv
884.537 1021.13 884.336 1020.11 884.336 1018.97 cv
884.336 1017.81 884.544 1016.71 884.961 1015.69 cv
885.377 1014.66 885.945 1013.77 886.667 1013 cv
887.387 1012.24 888.227 1011.63 889.184 1011.17 cv
890.141 1010.71 891.16 1010.49 892.242 1010.49 cv
892.907 1010.49 893.6 1010.56 894.322 1010.71 cv
895.043 1010.87 895.722 1011.04 896.361 1011.23 cv
897.082 1011.46 897.803 1011.71 898.524 1011.98 cv
897.609 1014.81 li
896.97 1014.56 896.333 1014.34 895.695 1014.15 cv
895.14 1013.98 894.551 1013.82 893.927 1013.67 cv
893.303 1013.52 892.713 1013.44 892.158 1013.44 cv
891.465 1013.44 890.813 1013.59 890.203 1013.9 cv
889.592 1014.2 889.065 1014.6 888.622 1015.1 cv
888.178 1015.6 887.832 1016.18 887.582 1016.83 cv
887.332 1017.48 887.207 1018.16 887.207 1018.85 cv
887.207 1019.65 887.374 1020.35 887.707 1020.95 cv
888.04 1021.55 888.462 1022.05 888.976 1022.47 cv
889.488 1022.88 890.05 1023.22 890.661 1023.47 cv
891.271 1023.72 891.853 1023.9 892.408 1024.01 cv
893.545 1024.2 894.613 1024.48 895.612 1024.84 cv
896.61 1025.2 897.477 1025.67 898.212 1026.25 cv
898.947 1026.84 899.529 1027.54 899.96 1028.38 cv
900.389 1029.21 900.605 1030.21 900.605 1031.37 cv
cp
f
918.412 1013.69 mo
911.879 1013.69 li
911.879 1040.03 li
909.092 1040.03 li
909.092 1013.69 li
902.352 1013.69 li
902.352 1010.9 li
918.412 1010.9 li
918.412 1013.69 li
cp
f
927.274 1014.11 mo
927.232 1014.11 li
926.677 1016.63 926.13 1019.12 925.589 1021.57 cv
925.048 1024.03 924.5 1026.52 923.945 1029.04 cv
930.478 1029.04 li
927.274 1014.11 li
cp
921.407 1039.98 mo
918.578 1039.98 li
925.235 1010.86 li
929.188 1010.86 li
935.845 1039.98 li
933.057 1039.98 li
931.227 1032.04 li
923.196 1032.04 li
921.407 1039.98 li
cp
f
952.071 1013.69 mo
945.539 1013.69 li
945.539 1040.03 li
942.752 1040.03 li
942.752 1013.69 li
936.011 1013.69 li
936.011 1010.9 li
952.071 1010.9 li
952.071 1013.69 li
cp
f
968.048 1010.9 mo
968.048 1013.81 li
958.853 1013.81 li
958.853 1023.92 li
966.051 1023.92 li
966.051 1026.84 li
958.853 1026.84 li
958.853 1037.03 li
968.131 1037.03 li
968.131 1039.98 li
955.982 1039.98 li
955.982 1010.9 li
968.048 1010.9 li
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 18.0.0
%%For: (Jekson) ()
%%Title: (1031.eps)
%%CreationDate: 10/3/2015 1:05 AM
%%Canvassize: 16383
%AI9_DataStream
%Gb"-6B3Q=sdQdZB51d4"5n;Q""u/+<[Lj.hfYYXYF21*\5Xrj&lh,Pns6NP[WdA?('F3O-Mo=#Vp[5:ZSZ9;B<VJ$rD7BAdC9;cq
%h>1nMUYAsa<Au`dURUmGm>q8u/Np-T#2Q8\$EZq8&N"h>SQ7'#G4Vh^X4(A#CtHjq9DUf\B:flRoq9t&1s3LjPLUL`SoDS+h=>iq
%T&Dmigca>+&EkP+ok75ALZ^YPh,]:Y.0$XOkqG*#FaK["YL[H;H%;d&4\#p/'XZ'C#9&Pe:B)loO-r=R<pnRd@a7[&MZ27TOMMKh
%19]D^FLd`*',fS2PQ0k++"m\Ks/bM\s1$bOTC?J<@qI8HcbVmJEu:X&ULc!GIPt^AI:r[IQ?eVF_;h39Y*XJ9+,t&O=Z`tTB_W\B
%04A?O")_f*7b4q[TphZdI4(e*QCE":!k<\[ZXi\&<.dDN_9_euZ_1P43q>OWS_d62^N=FH(?e!RLVnR(ke(W\HF.l+_gHGBqlOU0
%VtTW\`Hmru=$`,O.pF![46Jnj#d@=tj"T%??8TjKI\TmA'nFMM3Q\=Fcoc3ZjeWTD>(4JtBt16Qe+,%Gj6/sW@]l'Fol*5]=#hhO
%^^/oO/e7,rW:<lcG$\seKB-*^\I/(A[o9?IFD>ALrg*l8HHO!OpodpP+l;Mgc#E']EK]3\kZuC"+(=0"Ai8I\i!d3llS_UdPF/$"
%3g[V$J)T9uLjiQ;_LRi:/a?/J@c0KMo2>MKSK-/Vo]'heeSjn6cWYhrB/s%1SHbL7EpnUi2J?.'%l+bErgFF)#[48,)$j?Q>\cQk
%2BqNt4/heMP8kdaNM>AZ1f/Wn1Y'mV`bDJ[lSbKB<QIJ:e#QL6_9oH(05..!mk%8il4AeR1TsQgdpHc&(/1.V::W\18q2oUUtQ3H
%H)LJ<.CQe9mp9Ob>HN4a(SZKY.GAcN'[_]pkV7Fj7D2186pJuG/GX>"?9@V?gD@9?W/4"A*mLY_G,7c%,'8E]*<'aK^T"0H_T+ZO
%]ucn@.4"[\X8I0R#q9qn=sNGR,<$sX3VlnH<A$nOdo8YkbQ5"C'XD02:@lf)hJ+Qr,2/m1TO)N%3s/,.Z&C2s1ld>Z_k?aQnsH*.
%ZW`Q7Ds"!*lNK!h[Mj#8AsoEPE][YX(UcG`LU9iJ;lH-mF`j^Eco(@RdG%s4gj7?DCXJb1lh%[\qk]XTd.u"A=p=c5h"`hhViApk
%?]BAqIU&`@ldS],]ms),$8p%M3p"19Q&AhZg'O5'_T8hGdFL`Ni]k+`5b!4-ehq=/6"]M?#&TqZ)uWpBpLUC`TQYe3)q1rmDMVo3
%K!=4V9V_3c<pa1g^dbcE/nED'ngak^^TJ*$gtkW*hS(D1kgND.<E%h-7^II`J#0s>YNnQL`>4m$Qqk]cN+Eee-7Nn,ZsH=Zb,i_'
%?GCPRc<.Cc9]$l<C[/>rK3oQado#?4?#o@3+;6ZG/p*':\2=)B=-[+fcQE\AWf=1iVe57n=!QI83bhr<LR:IJg_-`m9lO]%HTGW6
%j_do]"@)b$H"kd^5l6e_AfM$O,RgOXal%E4cqp#lq&F!K7+@[cGV>bcdH\;VmASS(<.\E78uBEQ'ggN-ce&CN8<C=2.?ci[!gU:[
%2=h4Q?sWKK;R">/ZjJ]lVCu>:4P7lt_NgTVF;D%7^[B6I$Wh6)b0>bnGLe4,ARBr?Wc]-'gdktYgR1\X9bu%0CcQPc@X/>gDW/bj
%I(=qa\+&L.e+p7dQ7nR3SN66%<fNU-c#!]8#5+aLEjbT37\o4qSP+:4DBAbIds?M6%%KiN5SsJ@G.7S<5D?/em8XP1T/EdO:#uqb
%c*,e-fIcj0h-.A"4e;jjgMTc+51MK!]m>ZY4Uhm86t#[K,?nenh4Q]XN94!%V3B,)O^Zk`l`^)>k*!pR0SNBK=5j#f5;1%R/IB8k
%X.CXr.,/#DQ(d^E<I`f?/GSA]cq%%6d-Z&&b*Cn`;GK_rM<<FPfqlKBBX1tuGOhkJ[o[IE+hHVbf7oo`*l4D^g9"t+,m<6\F6[_G
%l5KWYgq1Jb4/P@)^F@P)mkphJVo%H^on!,l)rmSkC\CBb,$ZYugbOm8X-TR;0UG8T'clP,cOASk4!umT1N2P0Z5g2!!E'bLQY)-8
%5bmY>X;%]%Ea/SiJV,i/#4lCEnU#P@dPoE2N5IH&K0C+BG362@^"26@OZ,fOhR(d^\Pqg"1kK$PAH&Klj#fB=<s`!T98%LRkaVn1
%agnd%dS%NJGom"L.Mc#JM^k?]kiat)asY`mb]m5G[s+!R[HcM;+S]l4,hMCLpt.%@A8uNtrpO^ffbBdc46:4ZT4UU1L=^&8h`/[C
%VNbVf_-toK@^UrW$u`"I\_l\Z0CW"L$:R%/DTL'8@lNZ+fhE#aBeK34K\&P8rO)rQ"6s;j;rh0F7VJX0eMle\lYjLPEh*V&a&T?&
%n7)<0)I$up=?R+_bWN),30BW<:f:9\/flF&\BW(s"Y%N1nNaoJ.\C^'7Om5jXb+=Eo(Q)rDY=H/:/d\(6?UT-M9NWt4A:m=a^::%
%c(KM"eG5RFBlZ."?*4RM>`&[CeaXUHEm<=8;!YRUj[t%6WpH),F/a0uAK!0iWbj@NSbT6TR@uk1M*Fa*R/`Pn[L4$\Rm]p^Ng_%1
%Pt&F4]T2iX?\5pc)(3/*2+^?_[X:/2iMOm2GGHC`RHKSE-Sk9/>ajuls2'sGZc6ip.1<0$C@unaMOjV:SZt=Qql>"61f(]=<nE'q
%$KJ:S`jBO+1qT<$>)b?a`QbOnO)k23q,[p/,"9s2G>bFddIQ"-mM+lT#3Vu8P&,>JW75V-TUb#A6D[qji8^R]0T)?+(K/LY1PJ(H
%="=/<ImV8.MNlii]$O'C>ugO6a^6eAdkOP)^Fgcn!QQ!Si)d&3n6OL"W'sFae[$Y_CQ2<C[dm4ri!)<f[d)\!8sIJm&nSKkZnr"C
%0B%gX--@dXB.Gp?&g\9^bWN)dKM%IcDilVD;'^$8;MqdTnDT>,T+n0aSCF:/P&[g8Mc.)W[4!t$GqNi/`aQ6Q7JW:Xc(Ytb`dF=+
%"Xl=9(8Z&8C/IlcpR0W1Mcu@5O`-MS</ZosY\'Ig(:>QcYdq$2c^DhBRT)+i"\-,LZ^gL)o28Sk/P]dS?E'<aKD7r<ELeVi;=>=`
%p.btmI`KRf*$Lb@rKS^G3A3&agpG\"(U)%6jP"Oo2.n)a;Ja09XtA_g6E\Re>heKSA7;VmbdCRhCB965+k7?+m:oO9@B;&>[=qRa
%8@=p2e^TQ)aYi.gB5L:>Cr--N!cYtF=(`b%_+#l^@)5;?2B$,$KA'ZurLdKrFn.KKS%G9D,.*<"U*<I)iaJj]7&B9n@C>m=:l8!4
%"HD!b/*-<qG`/0U?&CXe]k-_Ca@'RAq8En.UMguQ7^qWs>)*%4TKgp*DU8o^)cYEpCK?(o>''USC_N&c%a)IO.b7MO?5IA42P,>b
%Nn34;Qg9.nAX_/SGk#>jC@h2ZbH.+$Vl;jg4ZBeG2sX\%kmh@g4g.<L@CBa_Q.%@lJ"s[,BXbQ`e@k.Fp`TLi8@OiS@+N<NfEKQG
%:+RJbh-<R''J[>FE@!I,EM1^e3T)?*(me/ni*]ickFD[01]mIC)Wbn+Eu9[F!XF-k9ZainM)X[-_Q2qtR9,F1:9A`f#^U29Z2\Ma
%3KK#Q/+VWXVVgC1hb<*\Do,_9Mu7Jp_aXQKjN]=I^Pi$Y,6'0i,r38j[ZOI./on\XTCZ?9k[TbH?0$D5"fH!qo:;9Lcm%X7KAP0'
%k<%ERTNXE=l_jRV`nZB$)j218I5!H1!`HZ[fBme-a?V^WqqQXpq6`6@Bpg;">)Ch^L"3B"?>oe4N`s,>IaOnpWti9MRf^4<%PrKK
%P5"OLB"(iZV@e,A4]:RA=]5Pa.meDH^2LW>ONhg!9F/k%o1fiR2otb"2JUKOmC]jsB<>/EH5iEJ]$]f-Rq$M;MpU-$FLDIGrT77Z
%0L?QFZ]V1<ib/:(qnc!g%4V=df')kJIH3##,%8[\+u:SM3^K>9Q82@5[(YTU9qfR=GmWKi>&.%D_G;RO\M]^ahe`T5P5Ce=:&PKT
%NV"//D+Pn@6HZrmj$)70VGBsiG3?%e)0AqH0^`t0<m8'Ejkh%Y=p/.IJX8g`ji.O3A=,dg?=Xb)j"H>+b9HG]#eV\i08mWh,4I?(
%JX?4d\AUL@qA01.Lh6RbKcE[.DQY3T2sj6)c&@Ha$*0I)N%H*?QpjT.k(/'%@hZ2"_lQ'\OljK==at63IF[NICW1V%G>PH%%8tNI
%9"\j[-<WGd1!@^ZnIj;e.*';"9XCE4YNV(lNInf7Y:ueSq?uD0;j?<)k1d)TH]-LB(9]As(RaFZ:6$sLe^i%cn`cU`,=O%>BlPYQ
%L2DMV&"kMWZX4sKV"dbs28tnS\^>QI=;i1!8^7GKIpJhF5<J084ciMgW2=,)\IiP*J#W3co)("%WrGL0i-1!!?;C0.cG6NPbWcqW
%T:\JRG\H^,U$8G_1n?rdJom8F;8__JD7Yu:SY*<)WldBUm^eK_ea4'lUp10.d2\*4!&rm0j`F"U`k8u[lZNl\=MurV3f`/MiYXIg
%!.-XINfaO$73#eLa&p87(3,:%*960&as)j#%ri#fRD!X@@[EL,1)KpmMG6.tPUjFfrFN$qVVYSMS%:?%nCN7i,t3JtDQL1ehcuU,
%ZR7O"iZudt6d:)?'sZ5[W?.0u)daCZc.5aqeuOafi[+^-BQm^^Vnt%5qRVd;Z7-hn3\>Q.@OLru&"8b?^@X\f3>MEMlCjmjo$3>_
%:%=X1?7V$7D9Y&hSTS+q1h=SMXp^F4q!QVjh4Va!5r8"J:`>n:GW'4\C@h19cp&9?3UV)dqfSX+Gn(2<SC^P7q0976W%OYHq$/qR
%7KlD,m:I)\V*\fi$GOr]1Ag0>Z$nbPGJ/Kt_ImQmAPqqSrs=D91p_#TdKr2&"sjs]eDi*SfFkY2M.16V'?4ARErQfe>WS"VnE(MC
%gqoO"74AU_DW/j"pZ>@eo7]-4nE+=L0]'V9YT)`NV0F@siQoc75F:BN(@KtpSQiUF8Mh4NgqoUTl2TBpbFM:[cCDCcX8:([kh`^N
%ealNrNDQ'hD_Bk6/H!'SpZHGTEst"j9+39<@aDVJ8`ASYhN_3UO1BKWF7HEOb_tQ5U^&2p;^c"NnG7JQaLIgLFId5cnZCdCdsAQF
%\WIJs<kDV9omX$@$E\Gt^ZoO-e?[nQd9Xmj.aO)68;Y[*YYc!c2j[eAHgensI$!qhldE/a1[E2jb>27&s*dhL#Y8<,5^M#B>O%8^
%c40O*&5,(_=&!=unP`EVFShW8E[<]FPg^M>M<<ED=6`T.V*uo^qRWp-H'.C+HQ>[!C9T`jfrE+&G*q5ePH:*h27pQmf['+7_BOUq
%;X1&\dg!COJm$:sXYosSP%RY8lT/i/\sr2ZP*=lcV4^S59,SmRg0V,]<2_OpPgX-0=8p<q0FsMGS=3)dmRgi5?!)1V46U&"W$,GQ
%6)>'8\Mj@`aPLmD4+FYBc/;2"`a/QK9YQ3X1a>K;_BrI=7+2rm,\>J1)au]f5l#"1Guqjtk&%e#Y^7-35mi<c3UZPWof1=^\gT'<
%%cd-V#op&"`Z^<Y^:ZoaSAOU&*7lNgK785.UsCd>^/h>eH3`Qc=O1b(<T6`Rf.D2]]o,@Al?aBVjZ&/"D4qq^iuDZ:3Mnfl=]^Vb
%F@[/SEgBR+kf0*d)s8r-]_L.;X;X8%N!,Q@oCtgW0p`So"5iU9qS:07lMd:GD=PU.dcTq*U;]4#ZS'?=AK!2?]*<="_tAs8ru(L-
%#VmE)raQj!$QECg`k0a44/!4#*gP;V2"A3qS:!P8IhJs0[[=RuQf)bIIC+5DA%%e=22*bAo8dF`hLnrc?JX\3]f.a#2TLkPr!p-Z
%6*:@<C*7YHZX,l1Jk8,s(;Z`^DAM>bauCj<h9?Dl>YQ?b4S.cN5!-J4W3;VOhOatB@]a^8![.N)#+ET.E3FYXAfKkV3b`,&j=_A/
%[qWa@M:U909oAm]j_uikaA!kaXIITm2kA09(M%^FA>\73@CCTd`?FU-i6(Y2VqgX1V>6:k%+>'=X7PKul63CC@92RAN9Qc)hA2fG
%=d0.rns6?.ru&P=7h=d_nml(dp%)3nq%'UcMB>,fb3eHIa\K/\I11s@2F&WC>Km6gKjP3jQ142!][g&3q;X[mgV;Rb(Vf&m]d#X>
%h'GC5d;8bto%u\abF`IAA`C0PK[WRt582LCXjO9V;'R[a$NCFuDt)*M1*DAET<)gD#$I!ia7UJ!j?I=46-aK$f6#&rh;7>A+Y;Jq
%rsO=':4N+8Yb)e=bNrk*IF0h#5Np-TS.a(DV58.)13QRO;BK,:+>nRk%a+I;f*_^"#H-h<^&7,VqKI9,%e7q!!K$RN`QfcZpu=RD
%Pu50#r/MkfO[#c"XYT)<b*C0-l$2u*bO!ZlgQ+5FrEq_DUhD9]7QVp52*in5-R"rV-E.WIn;g)S)Q0\uLALpLp)/C@RmA[<d&Q^W
%A8<"(4kc!oPI1r%ElMH"b('JLVASjpGe$J,,K]h$%J)O'1/:(eSP3"%9..pWRba/lbFS(@<:*/7n\\=E0j7:1q:E17W[>9(Bm-K4
%Wa#a,h]CdBKM>N[!l<>h'Aq6,?@tgdM.Vd"hFkj8"eoc'^QU)Fn!c)[L0-K.[hUcR7oF=rRZkI/6FaU'=T:1j=?tWo+F)gIl$%KV
%`XI[<J!<@Q]4I@\d%SC5kpc;_i1$M+V*k:VH>XKKGL(``!.E1E,k'<"Q('#<F[OV5CPP3d4osbe?cD,,.,W"7'BE&>,F92YIjOjc
%;-QbKgXKD;?GWf__+D,6@l1SI=j0)\(hM:,>HLKlS@3`S=d4NEhQ'E=I!TUj(Gji\ArI"]NZoIcTABJ#"Q`?t&>('2lkWfr7X=iI
%Htn(1Ws9;B-OE.W4qe?tNVGMb@'A?G%shb\+f<`E/#5LQ\C400+m@Y0?2N#&f5&'AdQM>,.g.Rq+uW[&1j(M:K4%7RP9"6:bN1fS
%rkC9@hRFK4NEO/A\rLR6HaQ?1^F@'+9'_n\Dn8Yp0/qr1V!ZS:Bsmc<?o[6NK>qV%h94sl3\@:t<+ld7R0d,r;es"o3q!4-DXGbl
%GUD.jN#ah,bkQD"-:s1['2+L/L9l.][BT)Pc^@m*,NtDnjkdMZDHBu"s*nA!SZ5BIV;b(CF]*s4f7T_'a6B]]plH2I"Cejr;MG`:
%ZDP3cYXZ0M.:Hh!]iEgpX9;]><,'lM[;@t`RbHk<2-tTH09b_r>+*9K[hj-W%h?mMg[d5gE]`Jq]!Y#B*oBABcQ#[%S_e(]go4m8
%MQNO5VIrAX_Am:(h#+M64c8E[[lCjpl^9/f8o2poB8Ui!+AH%T!Qi$JQVfLrassB#GRBjB[mcj>b\95um*XnFQd&RmZISDTc9&.W
%>IJZjgU,#\QdIU[aC;@_bOEM123at:7m2jRAEpCp"sSqsg/o6F:tkS=/D;_#n2(Ua=KBk!8*;XM[H\)CRRbP&rEbsO1aFOtR`o2*
%a3n&Q-dcKik[$sKTI152aeA<=O?!gMl=G.=[9i[9VYD39[.Ie$.[?LdrUP5q3G>gq1Jb=DEN?3^D=Y_7KH8U8mI9;pHL%qC57H9E
%H?U((kf1^VZ+5,;UK&<b'F$Dg;,DaCmL^3k9[MHCFSY+I>!?\*C/rE!YY1^ug>Wsk"\_&lbA@ae%.$<:LR'rY34$Nc[eaW5kn.>8
%ragP<,pA4daHDn+l`Z#7Qmi2g#5&SklXl1Rm5?Md$s0rL?Mta`g7;Dg84!ffKfHVLCBg2EYLC(A$mC$mlZPfeX`4%YBhLT/V+8)L
%X(>u3j\ZK;Te#e>RofhSY.mL3SC?^tlOpA67hcuD,2LCV=g`MR1:L?OfBXSK^C<4H2#9'T75$^@"8],oLI0#?/i!),PO6Y&]i\9/
%BFMS>BWLLY;=Rp=&,_GlR@Fs!@ju\V^697^@@eM.QSP7'PW<KF/$t>-7_ACF+4TU$c>U5A?F*Pu=&J7?%I"?7hUlP6[7JrWR_<`i
%pgAh<^$,asUSBXtG?ZBI7?hPM,Wh!u&UhNRNXP:emsgWoBT0>5`!@"Ebkq?k0h9`.s2o/E/!j(Lc*8XlW"/G\6;TO<,VP$tD'lht
%O?"X4.e?flN)5dA=6sW#DFZM48a6*!$-.?cpTHQE4s]Mno_Vq</CbT,N7>p[(&De4!-9OUZ5m27s/a0oRjiFn9iLIkp</`K[%oU+
%e#`L*^"'_uZeG9/*Q1`f;G/G)JY@nU14'HYl(e7B=fYj<6@>)7!3>OOjG.8]eP[BaGp@T0ZsPZ:fRrb7*:K,0c@AD?X]L['Y;DO<
%HRj2fYF@\0\#+6Tg"=ZSe1G4PX.>Y5>%UIm29_-A:M[0`[up&f-\'(_#P8hrG/)ge]p?$dVfk(\h:`S>NbjCjabkD%#t40%,.k09
%Z=QWG_gQ![c?4p8dKoL_\&kkn9Znp[7er%=HAIt!b#&p[G?i`WFF3jH,;E4;%3Qb#;r%ki_8'[@o;%ouN2P=$fROuCBm$FAFi9;P
%em>e2akt#'.Zs6Ag0dcu8lqRUSV*]iHlcjOasPR54H?PiU_/PT3LIQAR(on9Xa2pogtq,&7#U$'oPn`.&r(dS70m7Z=O=FW$OM;7
%%[aDIDk1L^Z)s(]YJGCU-VWCgq4P)9Cs*bpVK$1>maTY=7(2C%j&XnXf;[4.J6+,[,,R3_?Imi.jLecuFNpsHDFls/SaJA]=rG:d
%<,*g*1>;,[X#9B3R2AB&on/:;W==&%iN.lr\Jr0Q6eu!oOK(ab@-t(84LYuaB6%i_;CRp?r+SBof(oj;QS/jR,#jqT;HQO5b?@J@
%:2U0;0Z>[.C1sd'METQbXi^R>]^@_cAN[fI*?/NTG4G.OKfr,>Yg`?'8%@829pkBn=M!>VA48)P*5o2UXD`c=51h\h9X\13cKHgZ
%RF>N26AN362.&DsZ^D(j%Zap^,IO+YI&k107NoaQ3,U[+RF.l]DUM2n2p'#LcWBRG)f_NcoZB8GCo_WKSW'.V'UDqgg=U$8RS>Wm
%e:rHJ>!BE1f.3P]@Jb6!*(pD!+cY2X0jLR.STmQPW(3G=)L3AfU@ZB9[L4U$>,,$7iheT5FB\&<lTT+XZIO9l*(MpPp.lpgbYaRH
%Zh7kMDH)hK)AmVFR_.6bE*htOC!8<6l?\.i`Q>53X_*Wt_@4T;JTfk-1+>jR.QF^O,'(r$)`EV-W7pUAG4p#SHB)`n0]7W';i=\g
%d[Ja]g7Qrj)^V[79BLec;n/H9*86F%ZSGC:E3"#cfpXI/\62-@06[qN[ki@mGt7TLB@Y)g@occIO:@ssp.$lN6^:WjkSBsBK/e`N
%HF@^p/ki.8U[6<[[d>OkY,?"c2LrA,k9]RZB&3]hCN""=TXD5c3[IbG*?35PJ@/f`Rgu-Ml(f5ZkY)W9OFJ6Qan@((&p;\0Mohu!
%$nDZV;orIqTp*u[PFC'TZUlnRMQRk>CZit5W!q1[)K*[kA#CdK_04k`Dj>Xh2*A#6)J.tTL,*<RbkeL+21b+h[\pE%G+uDm@7oZW
%&)$/\9dAEaPV3\G<f(H7#qoJQs%[:ZlG,ehO(jjR78((2-gq]6`h8/F=*<M2@U_[$?>`9q`#*h3,LV>?C;'ISAf#c]\NP61PGc0_
%L(=.!)ED7?)'^mVLd2WtOYuL1*JgcTV@6S,@gijc8P[I"DYdoipj_YG*Tc.)qQX$tiJ_X1.!I;UUR!ZPpfJ`;(d)[ucH<0<gRYZO
%*$@g-W,dVA>'Hig&Ss6\357MEV&mA\rGGGF<B*"/E+2>*,b6)52U4XPnqMSQa_$QLg.Oi47Nk8WH,,6rE58D,cVo[)C5C)P3>lKK
%-#BPl=/N-M,',nEQa0mA;UC]KYKOH;n,Wnq9`!5oM39k?[+2cbQ2YIo/h%m+6(_E72No[*LcflC%XK2GrX.oq60Bet$m&40,)dou
%0URkaC.9[j=tF&<8R_u2L#U4'X4aLXFBT+tje#7e$$B4/A^g]/oD@*0>#Q4K:X)c%ghA9ZKFD@T^'d$_Z.B;Q7uE&*YBX0`8>t]4
%]q;FPALWoo9!g/&2-jpV1L\BF;:!;2k!^j/q+o"q4&/'7$D(!PA6a[0i_c]V4n6m^q`YAe/+!/l1hAPQkI.D"`hI3e?S94<\!g;T
%P4kooH*t!4`)uQ>,C>ukeM4%9=I#/PFBYU(?E*iQkY)c.@nqAaMlfr@4ds[![`QQ'7<Z2UZI58$0JM<KX'U^Y9PKLkV-M9:*+k'U
%Q`A,@9\^k@7Gahm"U"Z<7?!D=b0`o:i\C=pf]eO7R4Hdb9q#Fp!Gmdi'41[F=/U]>nM>Y4jdE1!*r?ddQrn/_8^7g9d.BI:]eE<o
%(E?fS)lLr$XZjk4(_EI_9)7]3?G)hI\cE`ba(fG?Yc$H5O&Duh&JMSL;?%?S9XaU;LcctlO/0usiQkV.%G.dWgb>J<GJWOu>4=>e
%P!n,NXa->/m>/?paWbmiiNnM,/3;O/4.&?#(0ZG6_'EqKM-4Y</0A5\^;pilA]RcoaKSR>)jVZF]EjsoY,J9I2`"jP#9n+8)%SJG
%;srYc>d\]H`akb[eTPT9ih4=jF@Es_^qX(O9Ug]$L4it82+b,^).LtaEikb/2+>9=_X/ikRQ)4Y8Jl#b/IYSb1,VhEPr&*=kk>IM
%jg:4VUBR@Gm8kpEi4W`Rj&,>S@V.VBD'1iCRFYNRTNX;'DdMFO^$KtoLX1uMY&nFGBc_BU:fNopZ=tF,%-bnK'R(Can&$MI]o;?X
%Nd7ApnO-G?1.oW,ge1%/`\p!Je/AE>:90<gYB7'H@l><gC6K0-^'4;tjg5$Z(uoO,n7N=.G<otQ8D%`-ebW.HgoSL1_ipN%,nj?8
%k?Pj;;L2'h\'f*Sn2QLo:0c\GC?R-f@7Q-8I(:hH,1H[j5`#7BQQmU*!hh]f>mjrkgeiN=ca+#?c;sbCbU)T>X*^H[D8(@EJ"upj
%jgf[*e`uj/B=DlcIbqa1]Qe4'q0p%Yc?AY;Dk?>UGLj7[los+3T!"DDhr!>VoIFg!a4U-PFN_7jC#-Z#_YK(4GAH5Sp>OTb9"V^c
%I:95)1g:oq>Fi"KoA93:Ze)%U9e/3Gf,d/U'XHEhk<j<UWZPn@[np=5G<bNh$K&U7>9?pJEfF,!S(g$i>s*Gmh!#U_f%kQ)hs:$o
%d56P5mJ6"fdI+UFRJZ^NVpDp6I.lt&=k.]]?a_jGMdNpD]@k3!_TGck\@c$/UM4tfMVj3t$>3`&\_HeZqYTrlm>G<M_YpD\G3%Dk
%6:ER+f\1_!s.(!_(>[5b4oa615Mc36fW4Grg0XHdhp!1DhJ%j9]J!@`1l_N`q,(_$@_Z6p?W\ZpS%0j:hP9J)/)MCbjmTr5k(EZN
%-Z>X7\_*i[b*Vm%mEs3^ksA(GCMRLj;nMpD^%V,EFh>B[o_rUgdH>t]FEHsV&9tFenbg8"Bq10l?ab""b5K>Ta86fkDWC?KRd7,!
%ccfXlZDTpu>h>_o.u!0B\$U5ErP3hoC=Vu\I]Z;!XRAA[?<mlGlg@&+i:*GI[$BP']^p#R`OGBYBjpIoF6ACLDgd&@q6p-6h)N+>
%Ku\Vi>U#E(3"PK9=?\b6SC^JOeW]CD#L9=pd'qPgVLQ._?W\gshCIH/oWa$_*;o;k8)YdONHTVpcf2]%H;`O_J(f:Zo0Th1YO$WM
%UDY/44egm/g7p#kG#jR=e+:V#TQcGU2lbbBIc]%;<_VPeg:"n5W7CV5BF/&*-0WO5&()l2(hV[Z/tDESPL+Ph3?Og\Q/$B<qkM$]
%g5@%7jmrA^gWo&Qf:1(n-Vnd'(R8=pi,3*jGANWhJXlW!_]A#ArODIugXCVY97hC%eGAhn*mL`u43tc2qp6g_*UQgO9532PK1A`*
%CqLFZKTTu;SJ1tLgMQ9ToAWfKF7I7RhgbBb:W]qY*J[DZiQ@q_QN))H2j:2@>9@aJ3*Zk\dqh-mgg;ZLlM@s_gg6oYltSC4ckGTL
%[C(#0]:D$4hWk^@k.k[\>9BI9qp$e/NZll#A8A`lXm.#)6#l^,qa(4u3W-C.WbjpN"J*hq(*#HnLfP^C,he:,DXQSrc8<#@qQ1$h
%I??,JI<Wk4$A_XRNd`fkjBd8jhCn$;SpQq*ij;n5<uW5`P)_MWh<hfFpg$"ldjmT\\GbdhcJsIEcnr+ii)O4[E[dZl?>i0_R+g6i
%]@QIt#MW8B:Fj-7p?bf9J$`Xt*8$I7]l*-e?gH8_(7hLu%ZCX:p7B6JD$92!)T:*[%mX\&NugOcpcP)>r%lGOPC?de4l#Fq<#`BC
%DpJf,[E$HZ0u2K@B27l>^NI9`p3<cGh!n^cVeJ%2Bfhr^*GOuDZsFZiHd;J73r$G(;n;gG0:[S2V-XpHqVJ.I-'FOSn)k2Hm>#Gg
%fB$Wj$L_3eiPi]Nm_ssV-;C7+oWZ0Rf!0Sj<PJ+c=APlWL\D-g\bf_I.cIU64F(o3Je9.,g^K"Hm*gMm6P;Y:bCo"T\j%IJ]%bqA
%3NbKANI:\b=T&-R7o(0f-NBMr>1mZQCUMbo+En2fNXILH4BjCTmar'F=2sD#@8jNthVVMjY!:OD33Q+4UUo=2g-]ZAmHL'dn8/,$
%5Q1F*BAU7CGK4rIpM4*mc'Pm.V^FmsqI;*:?%8lX/E`WpYU;8%ZBJtE0`6&4&i.crq6/(@a`reP+*70iL-/ku@]8)EC=0Fj$\uaD
%a7^"3CdLI`4WoGlY&1Ol)%S!i_1]ob[\DkJM0`uW'.i<sf>NRI2De6*/-_IKS?XV]cnSoI4BaiVO"n.;=S/Opq6/bS@E>5)L2s1$
%r5sgXNH\;X`p1K32U=<g8"4J9>8g5BWF?O5i00#\S,+fC:4f>\3"41@q\9XeM""FkGN:L=(&sPSMPf6i(I?Lq&+msl_OGd$@aY+O
%#VRoJr)ZI(,KV/6D4kkt_CMLM6->JFN8:\X!a"NWE(:ti=JPDe;>WDiZ8>:_NK4;uNOEC]3QBP/Eq43WrcMW"n8)P<<9PZKZqk/j
%ji5r3g^'5!LmE8sM%N%R&t:*6-'+O=]9PfY,T>N^O9"u0)Z7]*Bun@a4F/koj>2pf[Md?*X#tJdrP:#`P;n."=4__e4X4tGh3<fD
%cS]d!BBLqhi-`oncl]gY[kF2h/R?,eBm,hd:M<u!AOj"-qQH5DM^Q3uLKb_O_6$3hDr3beFkc1e`Pt_*Kg@XiD$PZIh]Rjrd`RUb
%k=t]mTm<p1gaAT\_5FR+QFl[l<6UbsGFu4.O@8=F]+6`Xf6XU140'lE<oM$H+-nt4p.:?-C`^:3*VK+E4-*!LbK4,W`@ZS=*Vpb2
%%q>9,bcpj+pdaaPIf"XI)ejFP&plu`.]fs%Y)3DBDH,I4k1n;/%h$]F&&4)B+D3q9ZBoq.mPSfo\[FFiQb2'T5tBX^-"i]Hq<)ST
%>%B"m(6e\(2E=+U!i*<oRkMU9_V+8Cd9>qq':I?35OuZ.2iZRa-@8Bq>pYq/op0&R"`hHlJ"M'f/:;qkP-9:Xei(el9BTj^51F:N
%SpYV8_eKR[>E-lSC#L,`^ViKjT]KiGbOKNm7Y-1>L%Eh":W3aGbpVDiJ9uE'J+;_iI]`>)n[^idjAmR3PtRkNCbbXL+k+q^3-`G5
%5dQo'&7m6rg6XXrXCRjIEUS`,pQuI$T%2eE`9oq>2c,h*?Nr1SKMqJ?n_;/!^TdUO4X7.Ya3]cNCO^<Yf=)fK*q3S`V<rpLIsYH\
%Hh1p;Uis"N4K.ZR<b-Ci._uofm-EfIbAmIA(;G<DGc/(#m!ggWr.Z#N^uieq[83Au.6ZR;IBZ/mHt^0WJUm`TV;1C'7rO<>#M&=!
%R-%WI2#";*HD$O0S@2p'H8%<eI([DNj=`^S>(?0TpZ*TqY:j$>`pAWNbPaqAp`H$Fbe&n6bh)5Tj708HLF?Q'X]HHa%6ESs2Z.&)
%(P,LE@eRQ`C2#rH<117eIJrBog[^DEL1>FCj2Hf.jC2HN8e1hMGI1TQ:1s1.@r/ihjmtM%+Zs*!)Z^65N.6@OH[=*,o1Ah_8]9%6
%?ct:GEHgTAXe0KJ]XaY7Jng$G^V+X<5PUg3IT-521T]39io_nWQLeoMP1>2Y%`Hi]`R`^%]$[:M`uuD&USVL21D,;1bfQ=4jR*aX
%Xl*kB)_3E>)kVbUM[p<_)o[F-d<P<E_j?.r6`,YD.-$U-2Vp'W>k"'=Cn<W4qh=BFF`hKujnHqhB,s(CMp8nn-5$Wf[XYZ!KsgXo
%>N(n)&(W@bYMZR\?+IQ&_IG#ih`\EAq2Od]X!^_Z$$51([Jd+DI\c?pm-Zu^kaX(O/>bTBP]QTE%rZ7^h2g:0fsB0!XnDEWFXSEJ
%Ko>Dl+q>&6^:EgNH,bIeqHPr/QH>]d<TjiUDA7]rWtO/(cCL,@#;DqBictKH4MUd%?90FXp[mn!M:VT&3'/`85eOGOg@+4kXk]hF
%b!H!BJ/'B*RHI50,[LB'DKkL0gY?d_$iK4l%PN<QH)n::pN$RpCL>Y.?bJ6Volgpd2N$$0o[DhXU79Ru10ZrW.@t?\X:<Hi4SdBt
%P<Qahp#Ba4Lk!3colJu(q`LoDHb1J1FNgu<NplsL/M=O1#6Va*VklO$*[=Rn=S0eem<V,],GMaHkWE!tojMX2mH_[2a``%ieC=.t
%[iUQH`D+pae^GVX9g5]q2#lV7@Qn``F2s!?^0UL$Gabo.UUIT0l?/X.9bfQR[)CXWa-HCkLj9@)\\mI0+2\5%VjjkQhX>?a(RN:i
%;s4*sral)re&Z?I6@Im3egd:!H^2L$D<mb?)`mr$GA`Nud9[WUT0Fq'cTW.ldQj*'R3cm#iG?0:Rl`-jht^`llg8M[N251FGUQu1
%@^NJ7"krj\q;C\h$&EtMkB-*$4)("=[<]gemN**=mbBlJ$m0oSq>.d+iNVG5QL=Hi::D;tdkpCfO3CD1j5YKq&g['j0,h;FK3FEr
%8jXeYJ,MKa8tOifk&XnNG21e=FKekL3OY\:UKF^LRG0aI\c1QuDggAX&=VA-fI"rQAb].6<gtV[OkE3Qg@<pqQWoqTg.2lof:1L-
%&RtsuQhPjQ\#g1Mh`Q8`ft*d_=)%[\7Tn#ck%QIB?BTZ@do%(1fkNf;5"C-f&@ThFj?\1cj"],-n(,\AK+A4#gku\h<LNOMMjMs\
%[Ge;71*3g2AJ4jC0$e$A/4=OEgP)c6Cm=f.iqLjDf([%Ls1DYtI99_E9A_e"`E^*%Rq&B!6j"&e6?)m7IdM48`J_tu@D`tdO&h0#
%qUon/4a2-44OnZ!U^3"4SB&V(PAOs3D&;ogoq`g/<'PUm]CY+qJi-bWZ$..<XoV;O>j3>X-uNb4'0>pNC%9cl'qP9X2sB<A`'NNE
%il@sg19UFlq13KMh.-1pR/YfC)G&i/IFor#mko.b`TNS3MM6]]UZ,2+,!#6I38ZL#5?]d?9'_<4'\co`#gBhLGOdcjpY"-[CA,L-
%C!c/%/qV<>WR["hb\VJUF4TpUS"8[/knhDTI;ls.m`J$`"QJ@i&*'QJ.W$+8cAkDTU#1?+Kk('*f=H5":j&leYq/h'j:k@"J1,=8
%M),Ds0;D?-gAS[r[/7feU:KV@NI.M](F"F4]54*YWfq:5B5>8DI<Dfo&FU9FV,_p<@)X;TaBBc`A#mm8bDj<@]Tmb)kP6&3=#F%K
%e0o49glD@2@7jHuH+SB'>^isDX!c.;qtfn)r(t][S[Qjt6YSNhcaOk&^$ggZ[IpX",@\u$hs`Jkbg!H*nbUd%m\p0*(fi>6Vm+dO
%F\.X22e\%jVtb+YaWGF9]NX2\TI[ca/_q:mk+SL-q5q'Ic=uUtlBHJ4pYL>O.=^*a^"mpT:XRi-V("=Ee!KOf\8+\W^qaUj!tO8s
%"`niR#Pm`F%l23"?:IPUL$A?WrV+9XrH>D^os`$X,)9ECh76*efctL*h5P=Bs*h1PfW2aS'qR'3(QhML':Gb'^"d"RBr?/nmoDF@
%F/2l-fX7PQ`iZUe4*R]t^6RL>LF8lR.h,c!cHlAND=>sAjoAV=fT=ca3F742osA*(p=3i,d`a*us%t)@a2,3Y%D_LC-^M-_:S]Mt
%0,Mq%[I6)g(VRl.PBqC(3DJo,auQ"`pS#4up!F@,8rj2&`dH,ia[iYY3U?\CQES&MZ'P!)]04XeOJ0-bI_XE]nG[Ui`Ub`I$GklV
%g[UsDO5QKrCAY),P2u5'Z[Vc9?J=i2l]_)9lrikSpLUbBF[%i\B(R)*(Fa/e^Ys^Mp"&D^7h`&lmXFeg5OY*`kM?s!m<c5A8JVW;
%:jtij>DOhU/3A5!W.$u]1Onq/o1(NZYgm(;n+Ku-BVOPbd/CjK-""A;4KPYbgeDi;f_Kd#[hFHP\]GHRr_X9=WgrZ]ZaUN(fjtI:
%2XTFtHi39a>-ZH#EI.46R3D<+$cQ^qT/>j'KC-jAbuJJd$k.DV_X=@P>`FY-KOg="^:q9t5:E8OAuE4H3*/MGCiFblm^1c`2n?h,
%l'q;*a+I%8Z,S\?hqp!PXF/^87=C.b*7EsI,&R7gL/!$cj5KUHl20D#f^?kfh%(n#D_*Re2B&q!d/hA1iaWVaX2R.qkOl0ZA.UmM
%Jc4TK2QnP:W>_t,H_@B5kKQ;8NEGo!8o[F0-L^g(iC`))XYW\j5r<KFcJ'FR3S"b\V38GS0R2(aPZGHkn[r!aCOLKHJYnQ\D^kLk
%4[bQrGPg(efA):F&%n84:f;7^Vp`?YeU-u54SI$bk8VC(Q+-(3fL,f^n$E9uH#fQrq=BO(IH8bg`1j"-g<OT=oqT-RP*&h"0=;=7
%&uk>%'WaMP^YOs[+Q7.O-JNd[G^jq:poG)':#nUR]:1B7Irr_3Vlod^mSlq_Wa(kZc?LhTNSF2HqBmuX2A7h90CIE2f@>?<3:EH#
%B3HTOHu69]CZU.W]K.d)\X_F,gA(5NgMQ@!l\."T?OXjVNp9haiFjJt%][I'[8"Lu@AWB+n*QFpEN)n1eij&8j#jN943+BD4rQMl
%<k$[5Rapt7s86/X(AeM9cu/1Fg9"0F_)IDr<dkai];nY,q=^rg6_.J:`bf`#hOO!Xgq';Ns6n&Od02E1mhKD?E=m"G;rF"]`J"?E
%=)Oi\RjeN/bAfPIW8#4dhj.q7ps>!]`4/;B8).$Iri?tArMto,kH-TplePmU>NqZ#IS;/!PjKsC7ioN?I!a,]$pJGhk4[Y/q9NH`
%?glP!ocQ3_5aD2YpV>%eG.AL(!4"<\1$(4F".r1l_T.rs`ZN>.S,&5/paEU(^Yt1P\pd+-]Sp:RoG8IndchkR=m":['!TmH9r<&o
%qPMQ-]`N&^BRN4L`K"UZeGP=&9\P;Hfu+;Uf@_K.Hs>prOk50Ih!cD5Ya[jNrr+:lbI-HPcLoEWeNR&P')LT,C^p5FoTta9Mthpm
%pf#]#D!WLFH)Ofo$C>PolZC"WEq?pbXKUgV5N0U1+,1_Jp.g$/B7.&(PIJ_^bs0DERelE;J`_`4_LR)#RI9p_QF^G;eS,4.d7aMA
%?K#/J]o[fBHd*Js#J]\nnLiVDdh*f04tKcNrGF`>]%6#/>3f7)D>`N^R(p&*^Xqdqf4YRJoACV`p@Za8r0#>?a4Fh[Mfs=IqWOZ4
%?Ok5LE[,lk/MY>^i(Bn[j^tnAFHU"0::*U8RQcWKaI'%8!TUI&cj`3Tk`,niiEC\2GBHO^]9\ek)*n4;=hXrVZS#GBd?.k?OYo8M
%J63+$HIfAR-PMR-C0;?iGkUV['jaVc1H\0ETdPSVJ!G(_<WS%Y;Gpr^EhdUhS<B9&-V-P6G;P#DA(As\"7;C_aJDF(#p?c\#r2pG
%$iO?`,67l*0u3ME-H3mT^;n-E1Prm0'+5GW'#T7,D1sYF8/1*h'pr5k&gCAU$mdSFg40m,p1DJ9IV/CAk5@B=9IA%P6(>L5JBpg;
%IF$PK>*@oXIf<dADUp^^P7GlX#\l-6dL*=`mHFtB2T!lK+j6OeL1+[Gh=Hh,PG#@XMmh"=VFQi>%_%F190d>MX'&u[,t<]al>.]r
%9@,:ckdY^Io[d*lG-ens=cA05B-#.sPWEQn_eY0\#19H+5F'_!BW<V#O2^^)G#h,J,h1>LNX=uP7u3k]AFTZI\k42K/'q*^[^<.'
%3!3h^d'7gh>FRZ?QRQHih:$Sne=<W)>35hAUS72X>peHb6A9DkAM$WO,Q7FnAQi6kem)B)nV-AA/.jGN!NfH2[$6)%Ib&UoJ5euT
%%95m]NankrND:DlVeCqSm9G?]lGHZ^NMO>0Re''Fd&'OHk9`)l=EFq/DILrk%2PLOP"mop!@^EO46p)Q+s[@BdRNIc)Oa8&R9A@o
%D;Y71A.T:5/-O?e&D^/KUtn^1,lC9X-X4uQTjsO'f!eqncYUkIC:_Ds2jmaUVR)sPgpSj%9$PS+RZHTAs#IY;A=DXl*QTUGmV9UX
%)f@.FGh@ej<fk]cl0^#5Zp/BIaSKGuP-I]@P%?X_&fBng!Rm7&7a!)6%(!b>ED1^!e?n#4WVJl&P'?1qhKZ!a9R'mp2"X'M,DN3C
%GiWaUc<+ahA\LU1YN??^BjC4!"NH2\%mh!Y7I6&;O+J_PCf:%IGr<!9Lkr![]qU/Q&L\dn4A33R_8JToNnc=2J\FG(M77Ua<";_C
%2<s)2FPEMZD3OZuVmA;'C#W_$#43JDA0J<*Tes:38'Nm/mZQ$gN]0$pjH,Nt5&eB6Tt6H<*D7KIe'V!7"BWqGY2^!W@k:Rt)92(4
%h7SMQirm+a6c1X3fP@hXn4h/Li?K#"po^8BU)70Ga&sd=0dM5Z26BY0Jl^Q+2,-.iaj=XGL<g9"!mpRm#kHo3lL=1h/aM\bonM6#
%]o/:.0M.jtIHVeG@M/5/QGNR'As63F5d\6m>DKVT,^sRcpIE-b5JYS\:`@fi`^:L"@hQo\NhMMfW[!T2F^92B<*:"lLLWXJWA*Zm
%`$[6]2-h;S.`.Wu`APjOd,\L>L1(*qdKu'B84naV8/UU&.ont\_:@ml5_U)2`tT1jU`^\T)b$-_/o?K%kescgJW=N(2>`it?BY)t
%_r25\ltF:0DWDY58VHCj:@d>`5a;q;8VuIMPEO8u"m%^u&JGF;PY;hnR+q,ggmF*0kq':#cfuiQm:_k4>%Y(>?of9Y@DJ3bD-E*r
%M/B*?R`ePR>L.W,iJ5H2d'c+P>S?#AL]-c0BDNmA9Ls.21<T)Gph>%lf(0G"NhE3OP_`?rD0HO`d_R5E0g-mWbX'`oObia'c=Xjg
%N_KWqKCU,p-gURbH42AOT^(l#-Z,;9(/!_Yituf23p`Ra-s;;%-(ur*F^RuRl2j:Fp'lX?3fpU?(be!(1PFGgkB87J,g;s]FIIaU
%a0up&40';=p;+ul/pQ+pg#CH:Ls\'+"S\ap,C;;CS-&($;4`sOaj$,%))s67T.FL&mBd0c5sFgF80DgS#aZ&r!jPd]H^\*\1[Gqi
%,+TN3aKTW)8d`cfiT+M1*f]@pkO>?p%e*EB6\:K!+$rVqOGGnn:iZT!:Kf'fEY+8+BgQS\ToLLpUq3,)4kH//`<ZkuEmY(_%s$:r
%#>*7ia^?Hr5"T:NTkA5[1'aKooSGR^Jmi;+7Xkt1KU[#%pf0+d=)8DhB3en?eEAVmfL4H-iIlI_bB5CV3$a3KE8;d8c,$hH7'a"T
%>8fNVW7-9%!l9eIe7e2<!_RlX?`4j#N.&UkSFKF:7ZdEOAV?1BFk90?)qlEI-rBRn*/j/=_]KDS=Hl;7QJ;N72\"(Q5b=@uepMmR
%YSaAmOuS9[*CM<1W[#;!TG&:U<=i&/2B"Uh+WH[(BI^,B&l<-n;RVDAN<:ZoN#6\F>*:\5BmIj'N<E3$bU0+-f*Cr3D%W"l7a!-!
%nqFBW/L8gcm%[!-N8]UN>#;6CdaZju1iEA_(mhm@g\/ZS<SV:HO3O3ue-9WTQ4U6[kNX3+T#h+*,+^?e&;W2a9>d%o;Zoc&3j`;t
%4%d5QDjl:,$sVf?@N[cjOpdtm/qL5sB_hEo$@.[&&3VuWE$RU$2&/pkIKeC[::Ol@+mk6-k<Rn/JRkVbU/nGa5QN90*0Mmt+GQ=+
%=MW7u0D,cKU1tjNMUg'Fkm@]s_6Q)B&NB?EZkOWLcHof2A3nsqS>fS`UmGpa4n1^p#0Qp:-qRXp,gmh8P&)@AEi\6QEnt'#*>uf-
%kTKY0,oRCJg4GKDT1mL.6/d:S`<f(K\@8:[PW2IfXUHQ(9Lg(\:%!pcU`kOQOXO!Rn>IMhB!FWlg6l'r<?[NcnmW!.d-`^gE$b!R
%`WIN(Q:;I&9[ElR/PBCj`jH<UiI."pgB_PX1+/8a.!EKO"c;m73%-eWT!1K0&Oo)a1gsL0W7Zr?`W@`fm:Cc.=;qIbBIM!/XD>f;
%!Y6sh.'Y@`gk,Y#"<h\KoO(kC2M?AXG;ok!!ihHFQ*F"<>bL89In4gIeJ^fr@dmZ#cOp71NoWb0'*Bh\I/4M7,bGMNR&hui^ja#D
%3^*[H6pBGYogD01_RcrO&TKXA@MM;[\md*#O;DTQphpQe6o=6^"M]p*B5BG-Eo8DA9_#8>D@qu/e+JFDX_cp/W#S&[dL^\I*F7?p
%L'inu[$6(ZUr@1+f.<-,hfK8m<OQN8b2u,8hE8(k\ATY1BYd42$o&aTpppe>pF.aR?9lC[/L>tP#;r$+QA%G1!cr1u:)p&4@4fm$
%Q%nfeO=?5EqM:]aO"`!(W?V$pPnc4j:c_a"@;)Q0#MP[L^bNY!,aF=OUDQf>2Or`1C+HRt4i\9^3KE2M&0:a$SSVW"Nsn_O+cSt2
%ef]0+ctIqTPYT,HNeb;6R+UuRI'U\T2+n3.g-Zq!9=4;!ja6Q7D=D3I;U77Q-C,M9he8t27B-JV>g2po7;t+`BQ>d@K:-5C$.1[o
%m_Hc:Y?V/6%[&Z_,>2HSW(nNQ#*9",eoZ$XY\eEf12IQ7[\nY[0@4#DmsPHn-(sPo>S7d+41OJ[RQrQq/I=:sqGu@jM[,Hm^,QEq
%/D>hU=2bR+CKdg]AX>k!8@Th,7=IA0dZ.j;T@T0&="6LmI>OW=I3G.q8IntW=9V6][:ebZ0OBa@'CH@P-j:=EPTPV&-jLEddS78B
%\n;=A+K4U\"'V-I*s'n4`u-iq"MMJlTTRbU7rgAa.j<V\q[=_!;_aNDYN)ocTRh[UA3O6*7[$Lp#Y!B#)GOgg")Vlb/XjdiD2n5'
%0aMoa&bD4073.p&95=M7OiD->f`aW(PMLNNQmq`ogKK1Q<N$3q,=g*dRGT/53+,7fNU00i#b=JXS]<#*-:6=sj8`$5RcYO2Tp8(g
%je2JWSaSX3X"K.,p)?YCca1VYA,At@@3ef,i.)f@if8dDqbL*\-Zq?XW_.qhKQ5AkL)[B.!uj[dfbNJiE3P'(9e==Q@WcYOYhD4<
%G0gDL*4^F_^%28e^Ed)b!rB>XS'#EV!`VZI>QgV;6BdcMe*%bo<M?Y!FAiNk:V-(LJ`F"4XWo!^)'RMZ*2s@f3d-_6`3@/V2&Lle
%\hNJ:as.Y(Oi]@t3Y=3",r,e<@uZ*f7Y%%E)9-p"Z?0YhUS1$hUA@LbJ%eP>2!=<a7)iKWl-^p%O<[%K9WBUNZLG@TMEk]E>EE5B
%Ln$&a(T7aDTVS>Z40=NUC;`4[3L#q!&9i;RQlN:*NE`uMWcN>;*`7KfF"?0^Q19qj1.,a<@i_X'%=oGDPad9K]O`U$JrpXYfSgZ)
%E/A<B0Qh(:fZb%kF45A)d[OQ`>6I@d,obV0X[G7h&3V[,>RX9L*/!9?`ZrLE%&,o%I])4[8-9cPc=H"j@WQA<^nqIi29X7u:^73'
%R>gtFLs-4SH=DF;eFH0E'+:c!=Ul;l]]Nni&1#>Vlm\"#;d.W.4&Dj?L_20m[fVRj)%RT01PBq'@cF63E5&QO$&\0fHaWuf`#O\<
%_+&Use!%#SdUFn^A2p<.6oYsN@3nr$6)(]Ve^uQW><9jmG_lH2:h&],*3V+9;8HiUn%=f^/W<H+ifq6R5QB(ff[2m77>?FoVdYFA
%o8uu#\K4"k=3%0OJYD@*O9>77("jWP>9CrkA;84+eKB2'%&S)$q;-hk+mU>.SkW?uY'oll!&?t`7g(%.aab[`oIU5M#F+R-h,9s-
%AIpFqnJjT@BPA50`P^566kW`/o$E5iqo!-=Nrh0R9qSr3@+.!e'0te%FGhH7#(2+XLUOo#qp'_;AoL$U\\hR0m5kEIU.^6=DaCkB
%@3l_+<C-\r7pjc$QnV=@cs\?"6'BPPbp679KLg(j;%K3HHj^">N,k>2&mu+?<6!i5*j4g^AL`nZI&J*3m78eIGS#g/Mn(+OQ9YZP
%:HdPM->Gr@IG7M7i@#TqEOpS:Tf'hgiCK+PF2B0$6!RJ7_ZQt0P*<o4`&L;i=cC]uBS+fia"<!6"_uQfh]8m!nK17U(8`gkD4tE-
%=-b#*?O.]\=!@ai)s6,kS7MHSZ-t9d\`Vt!8`u:>Kqd&;PW(S<m";T;_))3q+&1_ed1jmaTn10dWBIsgcUFR:qaLW,8X.ZeeoD`s
%R+P?H)%Rhb-I08nbZTt%'J_I$32e/q+to/o_en^k`a*Nj=!JlLC^U:1,8+CjUpOQM3J)j;R`[?]jCp=4LGkVI=Z^'_Pt!Y@f0Kn)
%.>eN+XFUFC\IQN^9a+]=fs^l!oeAY4^gOia+U<eD-)MsfgudO<#V;r?W&\'-Kp;S3Tum@Jl54@03UD=lL4bkNY!>WO.#fbm5hpi'
%/FK'rM[mRG*G.jD9Xd$g)F@('-n7W5EP3qF?mJS5YLnUU>%qCh7mpucDAu@ZASNI^SeqiD9\12Q(=?Ac,cqIX7&5tjF-K*pU+P'(
%^;4AN.[1XA`cc4+L1FN]W8_esBY4NSiUIHtX]K?Yj-CNjBHIF:MS*jpF&^:r,bQXOO`kf^nDg/ko#*.EQR7`DW[$GZZmD`&7RC+.
%L=_n_8Co]ZWjqU"UD^5Aj'j\XA;LF4JW[(dSFKu\UIW2JiEBb,La7PSq[no42EXZ&dR#G59Ys>.H+%gM@PF.!__=JaNm3,Y3`-R<
%7%+ri5@<",pn#`E:ho9O6DMI?F)+E-LS1U7ieSF+XfmX\KETq\qe6S8RKO:dEC);[o5q:,!AT&oM%d)r\dFg\`aelo*\oi1FnQB4
%++:GIB+G_/=@84G\jj9S29c.nWe(sh;?n'A:.eH-*(?I)cXaY^`%2[\$#h.Q'4ZuU-D[[<M]u5JOedZ3UgR0<$(?YT)$:p3?.mLL
%X&i@`2NhGQjXq^7\1S@=M^IFt7h;^Qe4Hkq82Q@CM)?GmUY5KgE8mtW8mrA<_!sa)8kTt?4L1;r<9"Ir7V#Z2-\)j\);^O-:")u$
%k&Cco3-E^[>HTtOS-iAh>o@/]G^qc=EE(rIOjWn4COeBEE(l#O(o*cri`(A(M3G#;<8[NS`2S:;%93TM"!/f7&`jrqXk7+k(;Y@H
%["VKdpI[5PTn[0AXRWhT?R/d9jn:J!Z5o&uf4e;SA.DABcN;QbSNJOdpdBcN(LnZ86@8/ULr38o8:/-RAmZSk6%d)0Lh%(>m%X*I
%aA\IfLp0Nt$j)R6`e&J>4"EkOkDT\D5V9;e;s$-(A\P3:?S_al=r5W:8[O-)aG(HBZ]?'2XI0N[J9QY\a/g=[=):'^hDKFq`IPSt
%>etr\Noit_b)dKNd[d6^X?r@[oAG?'AR?eloj*fEM2VND?;3SfD@,<F_r=^J5hSWLT1:\W$8?fd0X$V<KKB<^@1&DDkI'g/#BC%L
%Bq1U,D*B6")8`3p5f*Nob&E9a*]5\aFC8QUPKs?!0ctFu9bVf`%W8iHX=0!I>ZUngPTdh:d2gLZ&.#`X!3oA?Z&7V3L/NoAfHjT8
%b<q5=2B7'[=H5&UbV;]Xpi+I0$336C=@bm!6X2]FMB\+4;ffnJ8<Ip*6Ns/a<>9U):d]kj7'oY*3O[!b&S&?#OQV>ZaQWn9-tAdU
%cXmN)/d>3j^d:QE6X7LF)kcM3<JrtA7h_-n@DhkN%Ieolpe`tl3J2s/7UC>#)SZgcj2^g$Ai8%V]Qe]c?Ma0.Cn$-#BjUX_@LA>p
%kdH:9YZ]2>au()lP>RY_JRU_eM"./69\W8u,_JjJ$m1.pJ1)?Y!tj=qCuu)V&Lf&+qIh4Z_gpo&:)5.GH*MX`'8eTlP.p:EO;kK_
%_or5GZZSEQqtZ8.Tn#cB0_X@W=t:m')$`W[eFeOo:85_f]:!0%aq0ARB]S'3K;sif7i2\pAFRC_7YB5GeGU#RF9=pKb-EtN$ocGH
%9/DU1J-cF4_@"np\a0T8\0!/r/GNFOm1Kc:A)!"[\IgCQ=D!u")'KjUU^</UI4PcWG-n%N`g/K6HPRE)`D)K<e:k!?5TD&1@CjJQ
%O@AUTMF\%d]&F=\iOD?tndm.\QtW$_dg.&RMlKqaF"e`:[$1AqTFf&''H$3b;hT7n`3'I[@=-*"8XR<67<lmJ1pt1W-<E'-H4m+C
%7LY!rEnI:J7T>FrLcR#\P#O+mq5tN8X?fH8A<9Yufc,La4uK/*jXM"+'0m-<o\uYF87WNHY`J]Cd#!L1%+-)XB*`.2@!S.WeIfWV
%_5/D:_;M7FF)?7T3's;q)W=R<UD^1i\BqTL+3fAX;1LDj,%qmE@R"%IWOnjS8\^a$7N%7^gIl@9J.-7H!"Ng3\<bS,FcSFCs,VGE
%;2U#cYkYr0b;[5tbp-aC9^la!jl.cqG(PXApHE=J'bJJ-PX8G>nPfeE_;cDE1`$1**E?RrZlu@l$CD*?7r@H'1L`#3_.%pMB+,4#
%((V-i0SF1I/OGAEAQr-HaadSG(7P=:'X_bGB5g49JZbjt5jChW:qW-f@jg9pOMnF;WsV--;;]>MVb0;u=4%\V`=R/B,%.oAAZQ/m
%+_4O40]P+S:seWLRC8#gI)cqj'g]qS6?T6*):_Rd!.+-j%fEOdGBee(I.[q55So>#Cf.Tl6<>+\Wu0QRGL'^C,MJeWit37`8sK($
%*CN8RED8qjUF"!h.F4I!nd!-Z>ZL"`ieeQd3\Wu;TJ$\ILRO+A4j()_?BU'pX"!@#8_0#Dm@cN]/[OO]6Z'dbnX2?b9OuU,_PJu-
%Ms;OrW%O#&=;.a^&`_FIG(ZFVF.ks,Y!WrW,thK.nJ!CsCq-Uc`.5aYnjaLOD2@MLn5HiU,6F0#2Z91WLrim%>mj#kg`1=SRFo]h
%>R@h"PlO(k]"p#OE-3^i08=d:<oG:g"`aj(%!ip:;i$fu\=KXh9RA[t\k&%Frih,Y2cgT;-X?FAWQR"dAA(\mgdP;m(+*p@OANhL
%:feHY3.qM;,/;+?i-N,Z*heWfl$-;BIGsOd=HfG=:3J?EJWle2$]sIh?T<pO.gC!#O:?dPEC3,L9NWG<\K2VC-@?_5o>FO_)E@2(
%3hQo%'prY?Z'hO.E-5H\MjFFZO2<ZlVV#8loX-i-!s!\JTet6**S`O6STj:97(KgB5_$\g%"Tl<J1o9c8b:o:RCE[J)bc9^mu`g8
%5S3b?FjVuJi\aa4!tSt9Z4EOi%IY?Z=rq2A3o^-#pB7rZ:3\V7F"d]2gmM/)'RpuAUT*J`GJFG1Eco;9iFW`9QGf4pgB$R.1-t.g
%oEMI&e*`Y?]KTji86hXY/)Tc--s9ue7sj6):SI(SZ<`VY\49<nY-!6L<%Xd_P]h;s_%RC:6-te@cbf2H#ddRLZNh8_2nTn2GGmcq
%T#m-!&P9X1M0BLf>:]pFVCcL!GM8HW\A3Y7Jmeef#^oi:Z]6XJ(/[%Yg_qmBNYb)5[a,)c0dks-a!sC]`4t;`^1:BJ'1'7CGZ$f4
%2aL.kI"*;kH5rB;\%[F-`lA43g@>!U30Cg#5YPn9nU(iJ+:kq8-$ri#?CC>''ct1#PAMFEK`Kd1?V!\#O-QK$[ptD2?Z"pqQmCT`
%m(XoMKg:$8#)?_k]Epc>A,Bk_Qk#^(A#RQb_lj<\B4heDAV.T)gG9R@?4`7:%q,J'+]DhomcQ?fj5L\X2$2BM&0!..+R18.qPN5-
%4YWR5^^7RsW7f.$GDga+CL2#A5+^]kY'@(8V'@TXl8WpL)\-4g`aNnq2j3ig/[u6RQ/jh2E@o2]7<Q%kL<.VY3s<Jq;h<jQ!aIXK
%4XCZ0D2;f2G`:b"&-V]OKir%KMc)L,^^J_H]>[+o_;,OL#&(U4$41XD^(V-s@Lid^NEFpD`IfP*%C-R-Ag0\*Y`qH\PAQ40-<\V:
%7gLa0EN\!3Y#r-f:koEt9E?p-<C00=I'NmrY\bi^&S0B"$,uKS:]uNj65:W8V*:pXQr=<%j1tugM_[Lk2KTDfG7^_=YW/E^P&>=D
%-,UF0O==[V+F1iF'2[9^E]@Wi`M)B#_$CN+1g`L-p*H-^(,F<i80^t4jpTcWlCXG`EK(:0X<a!b3]n9f_4=,raWMn*P.(uqoM$d\
%=9.AFU<[u%+;f3kk_U8b&@RgWQ7G;2QH<4#UsSaQ'Y#i1nr(U@5/?W/ii(eE'bF`oMkJ!e^.a_p3_'^?Z-[FmL7081,bUIqOQ-N.
%#ZNO(Gb394GSG^B=t0m*(GQpq4h5f"97TYt3q8/I8ArW<o,6Tr\l/8hB@/A4MLd0!5^]Vbo`ka,&BADa$0?^cF_"RGj2jJX=qWg%
%Q111%;0fY^VF!sD3_(pO(6:TJ=F;t4+N(P)10d2:SV;D`AiQanS!-:&Ka\V[L1X$em=57gX60bJ7A@a7-(_br*q,:C6gE#<4t;\?
%ScmOW\0k#c>/p7?O'0AC37\gLKcuUcJ9kI3$6r/JL")1jG780n)Rt9n+UBT82c#<'!,Znp,Ba.0M\m$4),%lr!%ci[?$4m;(T3?F
%i7pp-jgB?;Ik1b\-U_4aP&e`t.'n#_N$3+TE7QMUqfDO]'luM3NTh@o%@IHq-AF;[C8U%WU+\,eftQ)@+qU6#>*Q4pX9C0XjD&M"
%i$ooWL6/?VTcIuK=F1$N_SX/gju@B.I?Wn8<kYI?-IlN=Yro=gZbgh0n+*,"L93drIS#I-1.DT(A1LI.SMkFSPq]6D,T9omnAF?Z
%+]KW9EA7r/;&X,RR"k8C2?CmAq)n/P)11t2=*j4h+QXmq2]akcbCccj*0Gf^.NC%-5AYCF\A]VU#T7Q`,E,J^gS.9"KeIsj8LO!2
%6u[uq5p@08h$n)'qNe(ijqkWiX2ma\8dPO(*SV2LLIcH="BOP8*#<(]Ls1N*Y/\J'#b/Yl:,!mXr2(9OMBBPVL(#JGF$)AA=j\Hs
%)Y5s=!TYKo$4rUm+t(\(nbH[EiH>;koHEUO_\*\1(@lf)`ugCC`7"qK:r?`U>:pm,Bf\mXIM@7-&JkLScDX=T_$<7_P#,Dh`RSmn
%6hsW/\RZ('aQ7@u:<)s[q#RG7c\=b1$DC3!ULCBd_\"/P+YHgs6NiTe,j575QKq/\hLj0D#+Q)1WCmYU=&_0Km3D<N1uU@PJHZYC
%BB'nm'3qc#F:0o8ie,ZM%7,7O2%32\75ilY/WMR4E.jCa@*A[XR>MG+1Rs=Uj.j=_R,M/@05O#j'Y-]3grR[8]l@H+fWKfK8s+5F
%q[3ct?Esg*421@8>SPTEjW3+HjL4?$9A2Z9c]jAtfYZD)7u27oR`QhNd?i*46_(#KG#/5caaiQ^6DlXs7!TFs=FX#B1lj)f"2&1K
%K8IR;NhU\'FnF%lNM.ch@nKh3*(_(-'doYF@(:gk6pSDQJGgSrq=dcRZ`DE]lhOHj?tEE+&eH@I6FPi_,]Jk@SU[7X$uX,TrI4l_
%*b,<@!VHJ=YsOA,4+.$\$H/<GaN$tW4^rV0]]il5J-3\rg2k!tD>>&9h-e-]Cmd!T!HSY2TuE)D6m0^R5Y1supAjaMJEmRPX?]W:
%_lo9>'B+gV)/PP8X1#tt,j+"b_bssZf#>#tIVL2jrC-k2;5`mbE""$b6DPW>\$5[A8N+d#^5(k]RU:=-cdnoZXPpF+IOE$AXVZ]s
%&<`r.%-&$WNe!Q/NSd-\!Y,3UdWG/LE_lg(k@#gp=:mKXacZou$(Kaq[aNVNgS+tElWnmBZF;LP(DS('[[Ji.\]>?7Nc,Cp283nC
%K^Ka&bV&=0ZKI7h*+-J3CalK^$mEOC2_>>W&=s"qG>-\Rbq@#iODtKY/?p]H^Z6VfC>5'+k^D\G$e,/2\LJg2r)?(]-8aRfa5SZ^
%*+(,iH)TrqQE[^eU7VF;W&/5P76hgG?@F+g"WC2j%'eLPN!q.c9LFDR:HYMm:eb&-,R`8sJY4gpZpV)%OK#cGBZ^>r\Nm-rCjlSE
%0AQFGS!#$(La#Ot3Eg)BPM7Vo'Q5u$V'S$a/]\?69Bd2giY+TXBt+s-Ju5-815K$qPRugc;0!g'[a$7O>!PlCU9a2SonjLl#W?I,
%GhH7eN0&eDq5QbJN%!&?h`3tUh/O0Ej$<ZLJKdX&o!<K>Oa1>I36s-mnaLf=PXcS!.HR7W83cB_FB=Z1jWLqPR<_FtAi:SY,&6T<
%eO123)X/B/R<Z0!IP[9<7H'2h#ab>G[1[p[^_<"nd[<Lc8;ujYFD?0>d8N</B_1>C'duD,\sUDL+Z%.Q;ALC-0Bo0TNQI:F`MF*2
%(QJlES*!."JAoY6&+JO`0R1!;)#r\6^+82_2r[?9!MM2\!Q\Rd]!0-CaK1$-1[s?IjroYX)Vc');)U-pe[d^[INT"R=lZi>*NR;$
%14)?Qn2U[*$l:t8-:#'kE%DH-6&7dehc`JohpST&VE4Vp&9gRm(%U#K=Nn@:#lV)S(P46g%Jc,)6V3uP^Ifpuonb?W6!0muoL&V9
%*)U5fo@%8%F9+/9p0b#"l%]^FTE],63F2t(\c\37R]h5k6B(6i5XQr$!#i!sXpl'eU'-0'2f](l.nj-llc]7bb=u[5L:11ID=N5l
%\f`T#gVR\'0_=>o'0d6gQRN&fK1H$b6p>gIjY2WS;]'bXT+bQg!jR'=N_AYj#"2>lcBATEal7u%-'ZVUXrufa6qE)8amsg>YK%+R
%A@CZh+Vg1#+dl7c7!5,58h%r<'_&M96`+75]V\sHO*/OZ"7\U5W'RVumY<\;N&?&m_/Q55[=(ts28Dpa^p*CJTo&N,,En$Y:5gm^
%(Kk0ka3f+D6pnW!lcJ*j*@;f*8d,0&d`EmuPImS_W,MIJ,11O=VPZ0X%XUmoTnSjU8`M$81`JodoO5k`K+Z[*6BQdBc3#K%AiSR2
%4)Z<jY=U5o[/C"7,Mt8gKC?qOo@5$5$*0CW1#j,ajNDY3GlGPdXXMi`2W"9c_GI(g3t6EW68q#@7WAtMIE=D/]UCOW&6uI0*WTOL
%ABP<H&FVg23D3j,FOCl%iWX:hPG=1o.S^oI[_eDD30h=hSh,"ML5Bh1GQTJ:dr'VJ;$n#J&6!Z#NA*?"4h+u+!h,g\/%4$eB/pS0
%@,MuAhV^s;e.sr.FJPj1&lG7ai"_?LOM'd-Tu\a1nj@X/eA0O!?:L=cjpip[AMpJ7NgFV+^k[L]llAeZe6P=)%56nc*L,:nnRoM6
%i%_HZ]_Mn].]3D*aG'VOcSG-^PXANR)\oC*0a>c&HuBj:RBEo7L`'l_VA@1jONN-0!0G53cZ0?oWP;(#!/qZt-"2^q0`WXU-XgYL
%gf.rcBcH<JLc*oaKXN<sUc.9;Bf:4\!Z/;H!T?P2KMZ[+Y-nU50bbcq74o]ZKrhrp16=F0Sr!Nf'@c%8;\JB;CSW1C:f:-C*,/"6
%+W#YO7l(]X_/h9(,"qUa!VJS4(k;Z:7iPuW9:?4j:bPMo-:Wfb1*g6P!@G)h@7UA@a)WI2KHU@]AR[P+#lqn`p,F>5:Z_F]R7%l)
%^o+hU=u[5k!(lo[L'7!4NJp9(jGk%mKu">J[Y8su(PW7#GY$I8S.JPE$rk=%B%Lf0MR1\J)Hq_*b+"W3$`Cl_*+8Q_P;GSL,#Vul
%[_!]U9U0V+gVM@4Y)&[kCq#&N)SQocB"K(>#C]]3b'#k&;Hn/RSEtDqC?pUR(TM1);T$A50\c!1roR8_UMRCAQc/Bh[iT.n*L(__
%*-;Imh%&;;EXg]`;qn6NdOiXC5]e1[//nLUCR"40?mRk&9Rq2mgL5H`Q_&\omO",801a66iP[EVL"/SEN5$+ciUp;?pcB\Rl<9p_
%(*s.#`YtGMon53BM'WfI-C\B4BB'?P=1M<h*h?s@2tS:j*hh=DT^<qYX+6<"eh&uM)+"q5ECE7c.'P4^0$#-@RXUXl(9Xhm!tEJd
%r8=0knIE"Y@5D(`YA>iU@0/nF]<NZbB1[0+PCrdA?-AMmPLV1tLF]22=P+21(668^,B?<&$jYpO5X"WfJ!nDe44f`?dh;p583iIK
%KirC#nTJ,90%n)N#=ZbU&Lsr?"@ZZ7S@37TZ#UDS@iJ<Mk]fmT.G;#'mL&"0T_MV^+c><AI[$6=4Cs-0..@cEHOOpldE>h#cnK^;
%]6">:4W0'0DT2E"HlE8;nd0279%2-mZh_NQ:cid@_UK>d/32?"iCp#al<f`PA50Y\i,QYqN"K!]-`_;T0oV[npn]$\V?N=1GZRbh
%U<2=E(O0@i23IJ7/hdFDp<l0&KJ&;1'd3_g=.tFJ_"Kfr=CNSXF'fW=KMc"Z0bqO<;1Ti6a1%ib"-:ILA6^pa^)c!ue&0OoKD_eq
%DFR/9bJ@ZrGYOZ[5B..)PRb($17AA(C\'WoT%J0DaS@W%@=\JaXk_;4'.S8#>_j+>%-WmbkhuhlJ4sD;3OilS^08?LgQkYPf6b$2
%#_(gm09jia`(\BmWt&@<,5OntKa7t@8HjqK7eV.FjFjd!Mcg<EK5=DL+s-brF4A`."q[_q]!I)eiaW5mVPlFB#TJYbqnej=@2;3m
%4b^#u]^`"H@fsOq]U/#tNWK:0o@5T`!L<ij3rG8/,h*+cZU-'2=dj1%\/[+bZ!PoGYej0l6FO7D%LqAg<1'/V&k+Z"nmp+<bc.&0
%q6S$Z/JZ*f1nKZ7(`rFjQ$TTr69Z/!"HZ<9]$_X_I9f^BjiYFiL!*>@@lOc+$:8kI_]>H+Q/IY-77p<Ph)JC-GRgcm>L]CAl5oU\
%!6G@$Xp7:Mn62M/>oAcF9U8WPStINJ,'6<\9\n\N$DLBu.&_RQa"`h-$io7hN<#Ak\;^rNYg1[9lpslm]rch%])bI/>r`-fi".:@
%?Zb<VRjIaA0&M<hJM<L>\2i7cd$1e/'o'k!5<LSIHrb<sbc(-YK8Ofc_T2=bVD#L7$YsK?rnrUOo#!EbYT/?r#Cdb#`4\LH;G&15
%Q&qf\r]idG19l\jA-B]'/fa+DLRA-4o>3*QA9AuYVB+4H+9M\!)/!OAqc=?7`#XTdN4?\2bBeQg6EDen?<%W93&0%4A2M+7ef`aG
%9i@gELE]_rPQa>JOT[`8K!i[a_b)^-L%t0BcPCHh-,<jZ;83.9K84`SaNbIF6pM2)^!@F#!bSs&'k[CR][ndO2P^C^QMBSe@'5?t
%.Q2+5E(F<"m-aCt?3YJ2dGdZZ\0W[6j<"B]qEP@N_).(&Bs&i"3^+P",s]g]&gg4jn;^!uU(.OOM^"f2)Z#O28)p8pL;;e1M#rX?
%%$st5dS.Fb`Z:Y\'ojaY-pA"#Z5kQjORo>GQ\L0M$=ACAJdI1:[,p_Ie3=@";=Fo6FeW/N1]apg1YQ?;0%l_053*<L=9gOtkAS*9
%`boGk`h+Dp`!<4TYSDkk<%pQ)/80))m(slW(`+eYbi\1ZIeqal,g:?T6oef#5Ro1raPnlB!QG:G%-)Xj^-0X7E4Jl;^IH7OgXjD,
%)EsW<?mt^?_a6>;B[IF&ZHe<Br,!pSS$KFH@'2,o>=^7MR%qi^I_:AE(h$@OK#p1hOXgHBE<hlk\m[\[2GjI73%i7M"W3YG^beik
%OiGB`<l>di>SY8G.psW7j<k=s0]D$H!O*jRD%&nmON,ha%!)TjZ^bta]X8o-%[[*QBN<.?U\`57p("&h9hI[UbFD&[hS'7k$*]3>
%dhZ;Z1d[?[%B^B8V:3UAp)mpj+*ZRBq#MDZc_7:4A$^hs]\t=KEILP-O]=*l@h_ph^*/LMFa,SAH#ge8o#liII]uR7E$9cqSOJ&^
%6R2MTO8,"C(@4R`$)JMWS0pqt"<X%NFog(eX2>A+$p6FMUjlNplX@c,bb>@kQ_"4inE4'o-@=JQ9ir#D-,>V$&Gnq/!&G5=5T4+d
%nW?o6R359g3Jiq2ZZ:h_T!O),(YW*;_B3C:A;Pi2G4ME9Od\L5J!SNZ+nPgt57A81XR'p4V?[MF12@U_5QhL5Ygb-d5F!D.T%#7(
%&N*!rOO]6`>\aJC#dt=:@'qG5`?K-@0f*XGc'M$>B"OWcKX4M])1kR8/E<q'b(Z:I8AT<iK]I?!cI%eK&bZ4Kn][(97?IT6iW!i`
%gNG,.Xt/B=kTB(YJ.,+MEPKRj</kNAUL8F^&*D:'.5n,r@?X$A[%P0XY-fnpER$"B7*H%h>*YL'1G1c_FmU[U$Vm9CPebKMbT_eG
%S1ioo$]7,Q_'7lt#8TSq'CGK&Ah"Cb-kNiBAXpo(GPN/urmA$bqdnfVpb">gNVS_e]b(OhB?t$2i#7GiUIGpP"@as_[7sgY-A+U&
%8=iX\'>#o:8S/^B*4j?sM6]>oP7qTAqTWd-0MO:2HsDHf,*UdsKsP$"1Rd67ig[*Y;V%[8;s*?cF5"guUe-clc]VnF[0Q$t;>)6d
%i>B$bh$sr4(!TY42jgq04Pg&f$c+1B8!sCZ#:=Q(.OI78"S*%&(pL!-);M"O(7g<F<Lp@gDWG=ec]md.-KlRV379U`$j2BP\^Wa$
%h(XV5\uHF]OS&-[,FG>B_)2=r`bl]'"@_O\,d2.U.(.f[o[Mn'=OOtgQ3;Pf1g2Ubi'<+;QRpXq2QJ-2&%:U7QoU;if;Pk&E<F4^
%IFsCAffaQV3reQ51>!A)pcXN7P("nE"e(K.>b\m%R>qJE2Hidh;i=i"XhJ:4Usua+mdOD)41qP82_`cC@VqQG`f*I)U8rF3GC*E5
%Xq\hb8P@!bh]B:I8H3&aB.cnhg:J[P!Jh."Sj[Y/M7c)G!&3q2MS'dp6Q4?kasBO?DEoXbZX$5K%[d$p%a>KffZd'q!u=iN0[1*M
%Kc),)Alkp\pb,LN!uCPh2D#E-KOdRmRb\!_.NIbCik0mSUi9hSrmq=A_:;=_lB:iXfTj%4r4Fn`%aLh1QAek@NoA?$3jpGZ.;LQT
%VUWH0'Y>A)Y10/KaAg^CPWCdY]:V-)?>eDueEsIiFa2n"7!-!Jl9dJ\Y1''V`u&uYMGE?nRn]d_03V7F\`n5"e"dAsFZNK.2mI1(
%Vdg]Kf$L;C@5:_;>toE%\-Aa?3<_QEb>B=C?$T(1o4h-)hu_D>)TZ6BS!m""JYg'9WaUt6Q'\iJ_#M&]B/h##1QtZ$MqA<^FXa>'
%cq9W?VTKdj+o%F]EX(E#9o`*2@YmZM48(-S?e'gP-(K\F1df[8kfX6d\Sd.3Y%2mXk[sHajAS!in;YiXgU/hnmkJZnLj$cO61nR5
%c7lSMhJ$WdfrI`&CM3,]#!H'_457#74$-kcB7+1WLN\CoYA23sg)8agA:m<4K9IIH_FEpO%[)"9S4.U<0nW\p1ScdlBL5jd1\Z$_
%ar,:74DIsC:hJ;%'!"o/ek3X+c<+c3k&DOh#_!rIZ`&o);`hn2@V4>kSRM3B@!@NP[Oq,W4+"42+),@*7\iRTHim7g57-,!X<,Tc
%+p7Gd7":fJoPq2DiDe!>L_fn<[tbjgJ/=o<4s-c6a,Bd[L8g`)*DcJbrQIFc!uf.4[);61X_Mj=codtu.P.6kr]2Ct#LcgXdY":@
%lIm,c%T#2IK>/_=D0[qm.=O(a(B`A2Hd%@ZiFt1<U%\'X(trpV<oZ8"/LD*I#N\!.6lN[LZI312HqN"n*G,ZD/.Z.Nf+H2`Fn)R7
%gQ'1O$qPnq+1<nsD'10'Jt;Y[\,n"2AtjjTUD^;]0@h:ur2_F7^A_9Fb1ri]kB0j[1f\`jRL4Z,nWEmTIo+`f72,Mm?"8YjCf;p0
%&]Wk?@CS7M99rg8/s'[Z?8@^<0OV:9p6<5.YK<PG\.b=.C5STB<Ir=fUXM!n:sX^S0hggsn.H9W#s.RiO/gcqDkiBQRcU\^n,u09
%>u.lDQFq5s_nUu[LI.Fjnh-k;82HP6Y6o=`2B/L/6=3J%8pi;:iN+)O,dm9_9_V>k>EQ[am(=OE`2hZGe\%Wb[%ToLWgTR,]dSS5
%qf.KC1S^:Q9.D3r#X-&?Us#6tQ;VS<<+%f<=Vn6M9BC_<4n.:$PfPblm5g2)LaDH@Zd)G??h+Z;_l>U+:."Sn$V(NAgq`f+^Bq4q
%n3,!K+_'Rtlb]9=beaoYc=Xm,N$4&\B;'&+A#QtlN'4Z7'"Fr`'N:Q?dn(Y6+PC,jeFLTe@C5WhOYQ''NLJ!;[W`_>dau-lR.r4R
%:eb:plrdA8MKS:TMnkZ&2%?]eX4<)qR1kkJgjC:"%umARQFU_sQFqVuZ?9/>0cgq&;fFA./n545X,%2oRii2p`!gepn&5JJnKRUS
%;f>W')`U"WfflRkUsUF1j0P]m[n@-iVm!3?k#+?,51+9UaX[3bp@M6>nc(jCPsbWa1\LQi;W7bZV=bF`JdZhuJWF1#Pqt?\j"_H5
%^nJ_l\IRQE_5c#pC()smr7NdLDjS-*g8%b9cJ0!(KWRs/>1E/\lHlCr9$>D0daH]FfeJH<$+md"[)-d[KH)B^U$0okjMqUQG$WpT
%Am^1dZRQ`uU'YN^Z^K*)hfW?>eGc#3%Z@[Jd#eih0+WR+Zsi5B$3A_XD[2$sJTZr_m1(qZhhp6s%^CG4NF^LE1M:48FF!)R\")8G
%g9nmXP+TnU:FD$AT3t,F9?Rap%m/]bX5=@M6FQQ9VBY"_l0\i_N#Ea(+h>:YfJ=EPWI@7I/lY+!mU74J(bkg%hPoH6O\iiDQV8Xo
%A)W%"daVF)MVQVE\s-.qZ75M&*PMAf:^FQd<6.$S2>^r`L7jZaEp%]#iQ]8<ne\<A+6\eK%QUDSU%b;I6K`^1)YJSSSS9I!,>i>H
%:5e*rHFLQ#TC-+Wp&Z2dA>4<q)pA0BmG^QCGP4k;G^D`X*m-Nb-B#R4Bd_*YgFU`eoCdce4p;JJB>s!G0(/+D=k#9l3S<mSCWXh5
%ifGQ4pmsF4F2GYSX-M]E*:-Q.,\:kXaNm0=WV#r:WX/+FG5DHa=A/("OcO'@NREkRWF1#Y\'B$d`6<ZkF.?+&+$B9aV?<'$3N(W"
%X%6]&H3G\,U($8*om^FU2pZNV_1<m(`CL%MmZNO=rt9K6aZ[)!g7<fLqdXi6>@m\*mVX'tCI"PDB2rBKZ#a!_2TFD+LhQ8+Z#0;R
%ib0,S3UW@%mihtEQ*>3&*T$N:&gYVE!"7,1^m2%cTsSB\!c)g,P/p$mK+g.$,rQ$4@j,gM/jWf?2jqR(HuO,GDKjP\e[mt.hSf$i
%Xe3T8K$rXe+3--"=eVeG'0SjlB,41br%:DlSY-M*_5L-nT*!%qpFg_Eb=Q%^9<B/DL4m7/%X7[qJQ!YG?j7DCn4W!Zl'bDD=S5j-
%5C"jq)9BTE[*FAYKUn-6-F]E-ouB!8cYqn+ahj2EF[m?.*"8&5X3j;!25qID7.k831t#P=b/%O+<+1U%k(e62MKQ^#UF9'j?!qB#
%@6%nLbbI+NqaU$dHIb0h#t\_UQtd[n[d=Mlp[#6BmB0RFG:tmo'eW!a@<B[$BOh\B?'`!l@[aV.33*eq*?C/+0W'fq@7DRP"-[82
%<P#8N*6EBC<E:Sna>h_p@So!\]$+i-^0^4#N,fcG*K_;>r>jG:l9:8l`<o4oOB':N`nQ-mVX9_YWMMTF8Al(l&?>P1cDE*(26k':
%IuN9YT2[>_?F1#q8b_E`j+14>3nCZ"m"D46?(rI1)VWQ!"d$]sGDd(r)WjI)Es^>HA,9ni]JEqn*[e:K*8kJ?3K.W#,*T;GB5S>h
%/j/b,@Lna9-$g7k'@-[Q=tID('*=O4SV`u3_*/(#`u(<uh-"5%h50Nt`c&[C.ho.]*AFCd<)6nrPH8p$fC/\qbYiV&S@IG&d%o2,
%-03^&jlV`49J)D35/pt@AVr?!dZWkZaFt%[fK%cuhFojP`Kn-q;0ttfQ6Yqe^egT(fo6r0#f][jW#[L:638+NEf23-M@Ma/]'%%1
%JXZ<.&XW]a>dmj@mqa*^AO&neLWZ:mg.aDT"UoF6gLGKP)O9KUcJjRCPp"qD6L$.Z'I2<ts6Da<X?<qlRsi=V%)h;ZXBo'U-eSV4
%X?;S1G5'$5&X'Vu`]KQ$UKalT<I<@P#m&e@W<@X8gDs=?qkA&nbI=H_h?bQKVZFDqURt-%2h_e`*a7M8<I)bR(RSHdjJ-`Q8gJO7
%ojnu6S0d$m=ou9H3KC!$+J9;(YudE#em)+9IDK>;r#UWr"fD#-?a8e7MSLfl%k8U2+"uc"3FVHi9TXQHduME9!c/$DbjC"6P\'6<
%hdn^,n@RQ],oXn]?LE$*:dk6*'#+h.r^OY.lg;<iB:c/E,%Y>1_D;'BF6okLiX0,6Db3$F0frf&G$'%RmZ9A8[t-fbdn^gN5#M`q
%q-I\*h6Qoa=@kK4oPCf9oltdi-IOuQ%A8&T-@&I*Yf-Do_>;l6XG\tf(k%dgi+<OV,V=l$]J#HXPAKg/qm'_$pBA<r<mHPI?O#;;
%rAHE+igc*(g:EURY^Y7+B1YJ)R>$cf5l2%_mKQk@fMVKP5b1"hbTZBj5f%jumX>21G'%4fgb3'/*NmA=qh:7u`AX="?UjV:ir58V
%[FA[W^T^Sc8rZbZ%/$*,7@C);TT#Sr@u#-W:J\37CM\d8P90Yl3S[bIUm=nK`9)X(k'Xpi+p<:s76HYa2[/7RPr`tWiYf-2"oeUe
%#)F;B/7KJcVZ9F^Wg929L/shl(@_fb6n/i5%b&j+KT-#T5qhqg,:kU5Of,$*Yj@iq7m5M`cdK8EFKXc:$WE9HEjml`&E2`dN"WbC
%QOp22WhaN/en?bY<nt&lYH(7;+4!4&Jj2Z0/@:)93G"_s_injajI?D9.Us5t*oRj^Ys8MUd$M$sfC0d=JBY.<,faWQ%Gqhde/4+`
%M'otTJWY4Z@DT37>O)L@`&Y'aXOd[cb6HHUd7PcTjalejm\j+/0l.()?[]M$R>2/ss5YIF=iMQX$5Ka"N2WMrFuW;ajerF)-?p0V
%.C#6p'<J8J-DAQH.#Cc&")9liBb]cp8:34/hm&Zi[Ot"KSJbM!.4jAHoLt0PB>)GGfj&l/s6PNkgn!?\XT4Z]B/JZnmCLC='XDAQ
%6b=Jq(D;!U8@ZP`G\!]]m_>Lg(S%sf&kBZ$[Nl<b."0W"4K(Xu#oN%M4]G7=agAY=Ib$(<):AQYkmk>I4c+Etk@V".#=B:j=-hF=
%%^M>CMXl9;-T34!<*^KA?s(5gd5O=71T=(AbGOLf$5M!?Tmt&o'\&s6Qg9dHjQ'6CB5T)H'TsiALDd-Nl`/10M]Te%7JOX/7iJ@0
%!?5n2`kJ\.@i^?9`Wg`@R9@[C!q$@fjlk!l%[a%q1>>LMAZr^Hbui)$3lsm,oZ/Kum+9^.pBJ*U6<8hDYB2W&bGAAXSJAtL5aWL$
%_F-:hDT-EA.<'qSXng%Ydp\;K'fKG/$)<gLcLKk(8M_HG`lMM`rC^C9nBqC!W2SCel#a)6'BU_:84tGmOd,g2kf^!ccSUPb`$hW(
%W[HX@2$%l]3AM_hao-q\S*WD7YD4.8_Q`WjX\iD97rRXYWSe%Iepa'2863#+m9"<ljpiU>"X6<)ik-fo(>7Y4PJY4V_I<k.(d*ER
%l]dr0e+-i.,^[1I:ZAUk?k-H4SComoI.rN%.YY_RR23`@Rt-&_4e&WV30RHQj::A^Kp"Q0WJqqI7H7qjgSM6''c;5MYRXTU2`&Y!
%T9VDgO642`A?/oG$_Nri&GTDYN91'&<j0JB1SdbGRPEM0qp<eSLLTBgeY6^0C_!Mto0j_S]).P4=BL:aPKnjY:gJj-jRR<mWYm+?
%P3kpY\_DL,)3Pt&0Z^dJ7pL6[1=(CijcY8ZmuUA(Bhe#.-b1<0d'OO=9V:@i"%9+Tc)dD79JO[)@bL8omRbRC$?E3*Z.#-6&@'Sj
%QR%ssYf6/k2$"pc4l:;ddGiSQks^>gIA#$&Sk<q`Z#OI#T7huWan5-X*i;P*F`$sP#keT*H4(%Uhus7W#o;\"Qse]Qe'jX<>%!rK
%Hsulk+Iggk08<j\.H=DHg,)Dk0p5,pqR,D0Q%1,#?tiUDbUhSH^bEcL7i)Q]>"D&IMG5ULR$B[a/e*VF%MSVncV%V?GV]=M$]`8E
%4EH9$2;fXiLP9o6,qGS%9E*54<4b1l0e5g6&i3T]0<.fujY:V:RFOlXdI)-[$ug6"9VqHLi=]8q?aT^)L6r&KUO1\Cd,*&uani."
%JhR_g;I_aW'q2qN+'!P<LYJ:^W]Rkp\jss<`i@4D/)B8#Zg,Y<\2%_,#'JI=I[H'/64Y=u[-;$pXh'\NX,7oYY?afHXR7NloDsPL
%/$;tdoi0dsSOBKlL*:jjW4ApS3j?#R9Ef69Te"[C=.p\AUCB'mn/hWD^,rT]_5hN_kZV?\DFY9>J9b$Lg8=_*h<hb#l7RDu:,-/s
%QDhVBR9:8i6+"(O/5suS=h<(DR)H&pMKqU[@2Fl5/(6<$aNBFZP3Cc%@be91"Bf'/_*Q*uc5"&Z":m:0VF7$c_sPN=M`IAq<j=[H
%OV>Y;@(G$leEEcZ<JJ.$l&jF!M4se3fF*[4G6q\\$]4SOFM-:?HO+]*KZ;?/lc_c!9ZqP$-C*^KOs+"s,2pILQD//=b`+]g]Q#oK
%E0=^aO448jAPbD/YD7!gN\g;W]<"MFWD)PDL(?%DdgH-FmFMAOklkn8^tW;IH;5$<<sJWj$Ka:q"r>l8`8jCp@>_Mh6u-3LZ"l,#
%E?FQ;f2_'e5EfJDf,-p,-Ws75:f*P6h7OeDk?tKs">EJ7`)==V0K1q1$iuhui*2J(ElYI^1@+<;,CbI7Ht`:1/^oM1B^V8OohGp$
%kj:r_"K9@;!%f!:kb'?_0?j27TWhCZ+]2s)<,8*'E_BR!_H=V`QYbNQ&R+An`?I<MdO,6$.7M`T=IDF'j"plU_U>T=b[sJlI"i*9
%'!omFAB0b6L%9q`RIXq)^BB;6(_%]o$l5/ZdR0c\HIV-EV:R\=jn>cDG-\,>7u*q@mUeGjLG.Sc>RO@T8UYYgD##Im,MLk36/bh[
%[DQ,Qh>#'uD;H^XS^acQq&#)Rh_R3T\\<RG0LIO/'E%Kbben_N>d]-(M)$=Z$d:FGQM'/u`b&/ibSFa/$jfcGi<I:[9VhKoIHN`F
%A?QN2KTW\\r2d/4k6#%I,W@FE>%0X^O+E]rT^E6[Y1U:JIWUk&,1HlLYP:/ULif;iYcRaSdXdj*;)>m8Ln[92>_T8H$%aaS%'W0W
%/C1DLA?IQa)W[Xo'/$sCoQ(,H\qj&4Ei2<+Pch-=&/j4oO*fG=!t3M/UfQdiMUPnf_8pp_?tEA7@OMpEM\'C!Ffn.@dGD!/B4-.A
%A*$@C3ELu=CRkLhiM01-.kk\Q(;8;p^fIT/!O"8]*StP%Dd_-W',tSdZXD2QDl\"-gl(:dYh#4E3>/1pKtC7G9#ecTe=#C%e$JLr
%&0:,AXkGKJ>^>UAXMPZTB-`J=cJuc>B4*$48W:8<^rmS?;J.D'e@>,bXurm+:1c.DdSa_n\bRoKN22Kd]_Ir3*@QQiGrG"loL=Tp
%oc8^q>)IU@Q["Cg.LC%t^\`+Y!3.8I9U`f0lCBGge_:Efe$fRNcfg*)--"RF\LbY'el>(Pjj(ZC5[CF]!HiOdD:Qp^Be@#V?L:G1
%/#e3gH9kc;o8ZGB1QeN-;/PJLLZ7hLX``bfL1.(aCRt8Ql/]%aB6uE*WcbI\-L;I2XEDNB3`29q3Wl]l))$-p4Hu&D#+4LP>,a;i
%cluo!e@E$KY-p]nF_r:K-gBbC[^O9EUJk_SF[#f;8t@-a@ld8RGs&%3a@`"K5+"sWMOacHD_mci)_(5r!s?`8\@0#(_'tlFc)(5o
%l,FU!SZs!TQJ[Rj0ppBnB@@r!&5o'h8Cnaudm^SEXk4MqLHDlq)-@h!AnA5'kI04^4(EGe1-^)i1U(Z^)Zc/DllB<Lc8RF+XSKg&
%lqat0+r]:&2CiqTgm&f"MOjQ+AYlML\Ue55#pZP,\Q5b8[pitmWC?P+@UW="laq5bMOacH.9+t=]$+;@<*`2-:gG-rmtIY&:+3Xa
%[3]If1DcO+8lr9=AKsId%q;e"f5G#<AL)$HQMOYKr+H<t.!Dc,3\T,dljVO0A$+B$R&'t$=qMmca&&m9CG[O\2$OFOM*UJt]/+@$
%!KoXAX!(O0>eMrb.1$pFI-8<M;d7qm@5oe==mTh&FU"ABf+4S=&!3V0CTVYHmUPgsZs%+X[JA(GFU")2B<"gO#A2GkMObpZN:5)M
%SUkX,"@N\0BGETNn>`>?iN:c.#%k+rZ0G=N_L^I)k=08*-@jim)#=HJ!h*UrbADgl<J52-c@BEjmWGG>"b#:kn;W!P2INrh.;nC<
%J<SM'W>\YR=Ukqt!a&X-"Kl\0n>^9,?/*a(%(s`R!N4VpTXK/Z^a-&uQoPkOrGFc>W,O[@dCN=Ze9YcCF\u\ShAM]k?*rJ!Jj-[Y
%++)m<;0(.Z$0ZAAS70*P78k;[J[F2Mi2%_?U89($19C<[80q(WgP^EhF(K9hUF>0a7(72L_SnYUP/[L']8oiKCj#\p.sE=F]'#Y-
%U(#7ZColD0fU143U935Hg+1VB7Q(RrSUloh>gH'??o/UoHF.FtF(K6m1X**<UEVKrpUBP%g,/\V_k)".ZN$)+d2cPYar"riEBIX;
%*pn1@2V`5f<pk>;ZeUt9l;(UNHq_DWFsbu[[hJonQiuMDZBPW&F*OF3q[M3FGBg5';jWT)gcT^Gr*ujSJ8?`[`W2h$e^F)<<b<1q
%))>,00Rfk$,$:skk#0M_n*l7Nd`rt=]eefiPGZTkJ^'ND7G6ssYt`KKZ?g0Ons)QcI08,\bILfYi#-JaI]9]Wle)AcP/<8YOC]I$
%:3U2$<p=,ucTFQb\"#r(4QENNU7eXLq9cbPnrR\_k23rQpYUGqq8`O3nb'q`hgbD"o3\)<#OLpKT9GuD-g)qm:3q#uL#UX\HDEa\
%^i8S:V\hrCNKr*]N"#"dIM-Yf0C0EtK1q\e5hi,KUI!nYou%<fhr``6b`o:(ZorE%ZPk<H[i]h\R6PTX\QudpN^*+6b;V@:+#DQH
%jW'Ws`eGLY&(h)Wn&rq8ILM0D1,)H!oc0<Abur_k\=e7X2AgU>kJ4/H#&-kXr4$2k0^CmRV<`3R,O`AEJT(&3qTqU6p<Ncn@%1g$
%khmo$/I1p)A%h0<EhKa,f^IRkCf1L^`-UDIm/s`350a)FD)qBPT.@t>F2)gFN^*+6bE%nj>D<8c2ZpBoRqGje!QWEm*7hnF.gP?=
%PY(C<fk420e=O09a1s7YVg3W`08Jr8pQ`(ukIPb`N^*+6b?l=u0!:l:o[WW,0CmSAa2n5>;geF+:ZO+@[f2nK2'^9Kmm[li[00F^
%iGS`51e`G]4NJ^D'LpR-YbNk+11VhQkIDQWCP*2W)sBeDP`-I$0*lW?8@iEd0tou@@-\;tD-]o,+ZL(mDeu)b7KJa&!=hcCY1q>o
%UX2m+W/L^m.=^7[D*Ru,W323]!@.Ng1;_r,huEHcXq?]GfNof</i38Po[]/m>Lt"7@@GXLF1;SS#/gtb0LhQ?YU3L`W0]cX+Kn0/
%[d>P$BVE\t=b&9,Q_TTNBie%@h&bN\G'&>]J.1J)c%Et*F?lKq(2)Qc,4"VW/,%"<rVd_aos9Os.opN+j=ie<`.$n`Z/?#U)U#[U
%)oPSBi<^7K>kWSg/\ZB1nc2"A[F;LQ@3>@K[7!<9\PAQ(4%QVZb5n=.LT!6qMVb%ta6e2E:YOX+5BD&Jr'o`Mp&NWS^bGj#-s$f)
%SrU_c7;)M[@TeV4Wj6XhD`a-.6I]he<#tJs5Q\V]^=jY%je)GjJe:a]]$\k7^?]5tFI\Tc%T=R%KnloCL\99X)]T=C4k^3JLM;q(
%p^Y1Z%K`,<DdXF1&b9r?&-jCE3j3`_m.L8XKDAJEMfSct-U]HGjnPY]e!H5q3c(GXm1!kR]7+FQao/0PEp+SqRD2%oc0N<lJ,Alm
%J,Sp/a7$`fqT\JYs5iS4:S5Atrl=cCp2?T&$h(gCoa]&P+TM/9&+@8]qT\nu^\chg+'sGEs4oWkIe_af^;U'8UI7*pDd<+Q5(<Ij
%+9.t9r.be)^\QoNHKf@^r80_ds6WTHIb;Bqk5)9qs67/!Y<Vs>?iG0G^L0#"e+]J!^&RfngRc1[r8!.SE`;l^2q]kGVr.L4]-$Jo
%rPNh$J,K*@g]-fmql`6!s3A=`2-&8"J,JF!oWR,$rUHd-f(8p!>Ol-N9Dn*o8\]@bnh1mC?ZaaMIRUk'4T5!JhgbZ6,ej6Vp&G$e
%it!5\kmuEks.*Eho'nq.r9GH^j"LH'rq$"_5M1%<LYP">]BLEoJ+rWF+$T_RqbJ<jGd,"nG6WrilWbQ(5eE<0%Srt5G<87]Xqnha
%n+++*$QMeC4Z-W,GOSS+W(ik>S1M0%3kQtlPh]WJ7gVrdallgPBVa8HGg"O*o==t19Om;i2cn1Dro]i//Z-s+%1JE2dQ90\ZjKUa
%oqS:d!SEVh?7j6:N_?kK6$en_7-t:Go;*^4kqi,H7Di6+Gio_]UMR1nUS)S/969tN73Xh0.N[2mAr/?-V.9:sZOZ]oARBG=f+`4C
%i^h6d;+5uLM0>UQd6_8k-H,T8Eo_f&V;Z-TM"rjp76Nr()p4L5N*gmQ-1@ij(cl7N_0nT:L]7deN(^]k+#j*8iEaY;C>o&EiB[QK
%+P'/iJiSH3FQ.<CZJA5K2\//p4m<&rTP,+a(5?MFe\oEi3]IN"?0jgp??M1&%[=YMkt%9h:&'pH5mCLi^,3\1d_`OfZd^]H9*GHm
%RXWLG5+#lsQuZ47@PU"YEJCP)1,02ZLl5MYGX'\`%4L^>du^GIM>HC#dk5fIEqJJPMa*#J9f.0^hQYWME+"+rMRW<X!qbS>[jdq?
%jU>k9M=+/iO%rmgDCA[uG`-1g75M0'f$3'?P(TmSUa=n3l1/YjE*Q"Idl[4$K?mt7dno:/]WKs\WjW#K_m&$/'5YjVS!;-U#MP7A
%`'04Y',olaA_s-fFNO&XVJMjGT]V*f^$iCWd?h/C#^'Lg5kFK*jLR5l7S77T3Es4]]3JN;lLMn7/[<"S[XP'0F-#)P75N1PV3RgY
%?aST6jl!k#B1(l\(<'Ik%po1]nsr=tXo%+qk7(JKVc2AD)gO>oIZ3^<GECZG]nu/-C-CN1\qtdH=X._"JYF$f2Y#<r@%pAnF@ru?
%@%p"3]hSAQJG19+SK@oSP-MT8LB*(.ZD)_2"KhhF3^VZK#/1Q;jOq"f3sBkK,>[V[,khsk:6To:MtKc6V5SF=_5O7>0[2oQ_e_4&
%87\#5Z(ufp@?8TP]3qiTnB*2t6P!HInI<*,,MIQS80d&8'7&lR\LT?gbBTcU.Ird6^bNn#.LZ:`#O/XSZBJF&YJ4A2oqQPh$qqJ'
%;+81eisPrpmG&5<=*882iW<%2Q)$Is`,&FJ#>noUoVC))P%u]feBV"MM9VHeR`-P#[>Q;*?!%6eC_eR8AE8?1k<%eSl"R\eC91EY
%Gm8[#5!5#Bm"t\H>:k.Sg"EoB#5F`WYjmj0/EbG)4(@+UMR_=l(nDj:"N%XLX9$A;-1d'2\D"KFLUJVmVe6VY@k(EP)]@mj5t4!C
%$`sgB6IN/<_.P%rO(bbR`5qA9S;YZ$D1c0FdlsUXn%,`.lQk\Jbj+/?-PHI=VobP.Wp]'rMZ^]]P\%ZV;>njC*I/16ArkXhPGI_h
%2j??D1ZYaeFe#;C/!BU`+FS3/NCC<(b;W'5c6@oK`%FKab'me$kCFr1[G0Ml#'2mbVW-TlI7dNSJ,C51/97.!MXA)i[^NCG5nf-G
%=&AS2MHg82<tV,7=clbJ9aY$7FJ%2pQe<OPJl&9YCR'KXT<-[FH!oL&CpD&&j,iLr>NG-XqGe93J@=H??*dIua;1aojc[c+kR#cR
%6c`>Trb;[HgNBJd>M:?6.cN27cGH6%X\!_BPA\*25j`G9K1usT9Q7[''<6H5lagfR>@Kld(uk9AB]K6*k"SgpC\*l9>;hQ`o%H-f
%R!iAdo^eOe"o0A]L<9V1S/U4;!6PrEicQ!Vb$1#Q*NHmlr9`fc/e_'Bjp]!N^O%_bNC*q'1Au1%U8[W!%4lQKCS_.`6h4m"iFA(C
%m<i31EZ@a.>0&'fi,QXN1'L9+G2:rA<E]U[H7?.+eqHp,U["(Sl/QOE1[i(e.lDurV`I`?jZ$Y?K.4Z.f7%0Y$lciHKbr&m1;BdQ
%YT5_gZ@Uu/$cL=,4J/c2SMEC1I"'WuR[Km(73"/s[*7*dWT_FBQCUNESK5hqd'jG3P8j>lYihVNK48V2Z7ojF>;*9]#oH=M6i\QZ
%,Vo.B4Q)lt#4k^_6oi,8[0=u<?Dg+Pp'-qHStnqb(DbR8GPRX\jj68\B@g314bhaOPR3pN'njsdaYo^<Z5S?MUHiS-,+DHQi4.PL
%X2_,:,"\$BE_J)E,Z<d!B5$Q#Na8)`g'YQKDQ;8V+cjL8,$SUcl,/O4]/8fmh9[DuUAJ*LZ7lTACIQdj,,NLB6ALMU9m=pbfgLM]
%*gH?f\3qs1p*o17[4]5NV$;`Cgt;6%*T:"/6(8RBIdD@bH[)GUAk>!P(6!BUSFO`ML9%]-\m>a0jT%*O80kmVPc$7P<B7>IUs4:*
%bmt[l2OOT3AG:`p<&!?/i9n_HY/jLri;rF/e9GQqVPoE`l&el[W$IfXX&EsQO^17j7riXs@up:`]<^.gUbb3_CL;!:hgoOp*1rO*
%nEGUqddC:0F\)Q.2rMrl!,K.dEc8a_0t9I/%Cd3'SpWP*n.#/;a>G/%*pW)$]YEBW0tFP*,5B3BN,)juaep)b8kfXI4]R8L',+$<
%X1;Uee/+'I&dhV%ALIp3(0Oa5HN>Qb(PWP5*]OGI8)\O"@&3Gc<1h6c/c6p!ZrGSZWLI01V;&,p*hdYaWeLMZC1BZJ?kQrQSrudK
%RcH>bG@r6@hHYq7HJKYK*e9REIN!W_`&4jW19nOG4ME.n@>MtVn_r[R=3!<j#nDK+Nobt#G#5^ip;A!Sjd;_EH-q\0>`d2)Zed2T
%NAYio0,2RQA:ai2KO$DW\E-u7qnt+b99TSJnik8s=-r0=SaVb>32T1oabVqqRIPSE:*AnegT/I9Ob:<9,cF]Qn,cB-Va>411;)C2
%VQ?c!/[Cm&bC&Enb+tJK&^28YRn9M<N[n8Y>>t`eM+e[m#c`'02+89'/2)!JW1%^7"]DDCf8q_AlWam<*:dD!?+<hWXc0"SUq<P2
%5s'i7S/pC4OVA$;ok_HImSfDX@=jmE\F8T1);mU+<ajngH*Figp_DCGbjD9'-]CqF<3:*N#1N6X<VdD=YpEB[=DoL(N/T+o,J5Kg
%UEd)iRd"?Z0/s-Kap2F0S$!DQc*OHg_cj\\K+5f17_&XGopf$%EjK:GSJ*`1G'E62K*f@_0pn@=Li)mpKjp/!>i;!`\IsH48dj,3
%\F`r]%j5X%jE@'%;r=*M,[@i2b#Dq$K=R:-X@,qWZK,*0#(]K1e/Q@6l3lplc6,R7e,bk];#Q<D9G:Hlfm.[)U5XYjjM#R[;51U2
%-6&QLG(nO?3Dc*5;g5ACclfl;52L"(UV]He^]%(+O8UkCq0*FN4sIUc@N2rt@JY#uI?8)PQ^E1^^d"9(j/n`=;/-p@)4j\<ZF@5L
%OPK6(B"QJ-(S4ar/<XQMB9.(VljFSI#r;:(@Db+RiFLU7_!W2q[L:)'nFj8lL@Sd>3tM^u\PAJn\lf7heG?Q@ku":IqnTY8j'F,r
%n/\:Uj;6h#;YuQ=UGF?FJX75YPCBMY6dj`t_fcQ*#r6^nD`tnU0\*OIM"Y*k]%p.>nZK9M3CHo.#fPY8r"f_=fhNQRe]!>!,s<"1
%*'A/&Tg]E5ehZ`,o$OK+?H`I9NQl,[@p(Rr@jjb8PAPrYqLjB).MGV9.P+*fnOhY53\?M`g3CfWJgpHno5"2e#Z)5014FFUIo5G!
%/IiL7".\C='m]N!j\XOZe1l%_)+-m,=&I4>&o6KME-83[WDYp&#*6dQdd9'NA#*Dfk@-aBr+,`\i0P,6*8B(?Y2CDjDo3tUf4;N%
%7]C&um3!]--RLZ>FTZa\GV0Di;+%UITse%gC^80aeg<#':HgW.9<\Wg_GKJ61^lg2LZ8Fpfed>sCuC?'V/pq>mXdS6(Os*)a3ARi
%4jqO_1iki)j1[F*@/giHd7ug427BuOIG/C'56O0C82qNc&_sSfcn8'p*(A]7q6cRo.Cj]3+ubWd&<B_c1uW7<h<JQMlYK*,7aXTr
%g%Oksi5'#!qper)@FD0qcOSXg'hf]alt02O#MD4oC_eptiDLaKGFT<4811k7aTYahc`/HgfX$E@3]VIT0o)hjMraSBZ!qdOn9[cC
%m?kE<)1J)or6l^0@p,S3XH=?W60%HgPm8aqLiLM\\.2)g"AJ^b$55)-(1Gm(%@s4mq>e]>`=\pND6cfW1k$:-pcZgfFX/KWc#mc/
%R/T:%\Uu4[*@(?p$K?E,$++ns<'NIkBe6b/jE\6S"EiQpDa6W0fFXalgGaA?OGZkRdXRE$!_]Y!dH)[lPMMe:h.>#nEF9@$`,H(E
%q6[nI8tOB:\;t5UH2iHG,.686%&Ht=>RR`u[^4oZ@-j%[n*?SpF-+n@/f6a-(uVCD6qOFfTB5dDj[_sW<qo>=.'JI]"P/Gg]kTk^
%Wo"l)Oq_(;BW*n4=p^h4oT9C0U2nJ?MpUl57IN^I+uWaf[5^3AU$%nY_lI=,BGdcC2W1OXpu$]1#cT.+aN::4Ds.C8Q+l(WD=p/\
%KmH6ug,9N]*O[`\.*JNPZ"Ed<pF6oU\Vf,N=Oj8_,d!K?%b&dk?_IO]S8L:t7tEU7?OBr(S%'0<A$rL?PE_O^1Q!`M7VsFZhPllQ
%.9msb%"g'1VnGe&G32&/JQr^"B\N3r".BZLY`D`dA8T\LhKG6R8n"Dnf-SKU2G#!]G6gDBAkhB*1\g'b=jJ0(B(XaNbZWUW;%d#q
%F.>VHT<UGJ'IAh\6:bTXb.7nN;?RJ\or43i;IRfiR%,-_f<AmZN>Y@U#GKe3UX'_EjUeC%V!N7]@h;QV<j'N0bb#"rP#K^9@m#<r
%?Ap:hX@3umTmSeDo3eUX/Q*k`#p`h[ZnWTb/eFKQ`o[b_"VY%j:tBNk\uaipQ?+d0M9%!Z;K]0P[9^C>%g[$nIl:-EFs3>49M/29
%PpOEf);`kk>tQ:[UPBt],0/Pbjja%t.T;M1hp/kY9PDQ)K:)2K@m(N?CW%)r0Tu/f#BQ%\]A92NR^BoH]#dDUqf7Ef&ZuC>65sAG
%,a_Pm/oWFB\>1CWGEV#4)\J[PX9BZ4?"HR#B.h<ucJ4pW*IL@^0[3ftOXo]sf9TFS:19kXQ6B5"o(6U,5',[(j4)"=q<<PuR>/Q*
%J^TO,T[41sN\W7^pK?&_E#b,en&g[Fc"0RIB'ub^oCB;pUsSlQLFKI_Z\dY@4ICYgZKT*b`ed%h2cZ:]l0/:9BEZ&9^o+<7VlI"3
%B+<Gn1[ZMJ!K\s]@/J>l^uWKs*Z9W]HN/,L*\+#6rh:4!d+`.3+?26QMJW1`1qXNP+/\?dA!=ZU3)^WVn9sA;_N$Nkjk;!=J;,qm
%c)!"ID:/m)h-^RSap(53:HNW\s#k)ah?IWWJ&hIP,T"D.;<To0$Jm+#&_"rg#K+qANN)Va4@HGpOh^E105!DGDo#A^h>*!TCdi9[
%p>IZca5\N"&`L`<C(2/pT+4\eCBIF.f(BhuKiD:L/8`EY1Se`B8k$lEpc#Qo>II*-=%:^nVCS1G,#q;1ee"]+\8P'CLH>haAb\$L
%2GDH@rK6clS2f&s[.+V.\YJVG`Gg>_2&Q%e$'@j@^Fj(B3VsuI7mLOZ]_-PBg$l''JZ<%:=$kabXJo0PAIY3ABfo@':D&Djo2scV
%*/JJ>AI9k[9H$b$KFB'\CCFnFG?[;]hOcYSZjDY(/jaUN+qMAA,:P_Ue'G5aaVe[(r#dgM*elP^CnKgAEY)df1(e5E[&o7C8^S`D
%WFKZg>cQ4TNDB(E9HXl0";p+3DP%#7%p><Baq`t(d(o=<r)+eF\DS^3(ELAhfh9nrB4M`eleU!J\Rr,Y*5F!qX%hTq[TM3.oMr1o
%X0NLO[e#SRVnH_?ak<D4QH@k:`E$u%ER)3s>4kV^U5[Rr]'I/+(o2Ji_a2p&R<biLLS0-o!nO)i>_P=NDgpC5-F_(t62u2V'-BjS
%6@0Z11aEgYL96lg7CGN#?puQ+>-tZe5"H7[h:=dn]s^N#d_^R!X44F7#@Np>&WC03IqjHtXI!fkPXZddS^oCt9RTVJO,#K._TYTZ
%=Q]-r5*uZ!URF26b&E3c'5UTb^22A9f#ha=l]`Frg)(>cq!(hlVfm`E6ki7(eo#%lOKGSS`,%_Ia[m^%r4O$`LUS\b;(cb^($D6%
%4t_=D)ZuXNq=>&r\LSRt29E%BdT&1aiJ'!TH5>"19Za)0F)4eV".)EJakS@VS!b4BkAL3*cU[`oFI;ublr`"11LH5^A1XM!IKA5`
%[FHqthB"F%mhC1V7cCF5ULN(.`'@&?m>46Mg!*<GqJ!,0gl/A$m,H?s7Ac5$_8`O]]1`<Y.0sX=N9dHk'[cS9lci:q9?=%fBCeR@
%f8J,;0niK5h/Ke`B^^=AUW4k$eGH?%/lnI;M%Gig/=45:U'\VGfO\:acAVDm=Ya28`-#lZWaH6t(GGM'ZZE='RnLR$B,j>c%-!fO
%@5#a<3Ub7V:aM`u:chFUXS:ddi\,_ke!j4^E7@62(k#a+%jfC)[.dd@lLM!G.DpngbA\=(mordWaTF(&kO9&of85J2*6/:HKh$)H
%ZcVR6DcDKJSP<\)4/>W9cn>o(j07'o]G+OL9rTE;1EAJ#&VDAn\;@N_/&Hs+=;(dDeXqIX$_!*5Blb<LU_[KV)J3l-Ni$>8G85EI
%8>MLI/ZH:[4TN%TL3r[9989iWZmg#FP#AIg9eg9aQ1K]bPd\2W;\+=m<j='.21r-mfVV-*d\/KrDq)4\3,;+u9_i$Sk8lHW@g&)C
%nkEE/Y3SmX9'trDoF?Ps\l3D'!/0'aR$+mO2u)KfGL$o.KDYE]G^i8"6LaM$n><\`0DGaa*jU85ZN&09h[CXsY0:kZ]FE^^@=-'7
%n7,rp8-;en2a;fMgCn.V8's^7SBQ0=KOXem_7B<4J^9*^-h2ZohnDHkf$j"c:q$"$9lFU#\`)[BH4)s/o3cBPLC[NVl;cT_YnL2s
%N*r7BQ;sDJnn^fMA&,0$iq.B,>DAPVi(eJ>dkXi'PB(H/0lPRSULp&O_:59gR:h[JY=J%nT1Rjr`];7.A)_9*8pdnVQo/*Ulcs+;
%0ur'1W,*9FpnZQgd7WH6Ed)$?bV[FgO3N-6L)Rf_pM<;G/N#72P[na>e\iE&VmmU[*:$Y]J^pOt!Y$uNXDbGsA7DFh(M9km]Vo3o
%K8jfs<KAhl9n":sDota3^/%U`IC%Vf1R6kLX>Z)ACi5H+fu=%&`Rcs62M+:&?d0LQ.EZNMRcVQbe>?U-[2D$4a!;!pQJgZad9bC?
%2bE!=o<@(^8Z?4QbVq/gA-V/$h_aY%D*9c7\9rqBY?GlJdqg(k;%l^U]!?dR%4@"]C>u9'G@8UK4(,JTjI&l[=,f25"k#SVB#Vlh
%dU!Z#`^rHqWYXj!;X^k"b@\g-O4mCS9K<u0'`hpk8KRe+GM=n9A/[fm+!0f0RIfDR,&JI%qbXnPZfnp;N98KG3n^1^*IbB\AC"8P
%c<k0(nY!RKbc^![:Dsd"_bLu/1,j*JSZEQ;C,@M6ek4=E=6!&!SFqJ/)_2I>]"+<J>cY[PY05'O(bh^t#<*Uj`7<"o`tf,AW1bU-
%d"959bg_gmm`sN\@uoP!`Sq`Ap-aeIAkIg2HQqCfl@r5>>t?F$/2U+[NtW4-?ee==&K&J%#T@3CH4,7l--&G`'=:nj=tA^sS6_'f
%lJUn-9Ou.0c,lScL*'K>.,L.U[l&9aAA$^%r+)k8e`TFs57moH(SK8q22*+ClQU/l:sCO]1]Co`LZ(qFCAm\cAp=)MX^K%.jCD5h
%[/]p,D&0$`<<H(+C\F@84MS9p.QDF]<_gItBWbUKZ*p]Ylc]XqLj)k%bd8T3X.,#Z#0P?Ib3d/U%o"+/Rn8OQ;K,rG1Blm1S_fg&
%[NNE5Wio\W"3oQQjP=5Sb'D^S9=\T7@-nHa+B=&UTVlo`Mbk18:<*!"P>FZ%R?VG"hL]>RT"%sXLOroG+i1>;kr-0C'O,;hb0d:k
%S/R,+pXJH4=b[p&U4h33)N"`'K8DA;L/M%(K&pm7<NCr6;"28qa?:O'eH6bRqi9cG%bT#iZq=VXBch@aZA$?2AK]-a<bM>B+j(rJ
%omP@Yj;'6!(s?_`;)k<k$"bE>EiQiZ1D3-9:")7gV'n=h]Wi,=5M#g`C+,[2[+L6HQ1!8Y$?g[iiiTmB`I!$a*IkW9&'G'XSf."A
%SIIfT"+NXs[moD7mj?'RSo<QumD^!Y$EW7?<9m>+C[Gb>7&kSFbGo/BN>;rC!Aa*$JHXCVmN.!c3c0duimA8aoN9:(3=%l=5/f7"
%iqKXk<saP?ghq>LKrPdl3.!;!ipo&Ec5B3]SrFQMD3_#@/)rTkdpH.Q'U8a53[H^C<as$MBBHW_YV29.*4d$\*2Wf^Q%D(/R<lQU
%%=WU#+V-Au!tm4r^0@if3M#\X7;_h)1?We7e9J`k2uIn11[NHF]u.=EH+`<Epu<).6/?CRkF8[6^fOY4HK7?&Hi#gNMsOcr5q5,:
%5Du`'meNA3n1DAtpS:"KF830i@Nb(5cbRR$4rBiWs*k1(0>G8P0E4lKrU7MuqW7Z_5(%hRmK.k90CQ[On8FrVJ,K#Xk?n242a=tT
%Nt5%T^\\N%Kcg;9rTWR9cQ@W2nb^WSSppIppO<C!S,A"Js8)3aq7lmnDuLFF?9Z1~>
%AI9_PrivateDataEnd
